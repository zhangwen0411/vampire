(set-option :print-success false)
(set-option :produce-unsat-cores true)
(set-logic UF)
(declare-sort x1 0)
(declare-sort x121 0)
(declare-sort x126 0)
(declare-sort x127 0)
(declare-sort x31 0)
(declare-sort x172 0)
(declare-sort x69 0)
(declare-sort x120 0)
(declare-sort x60 0)
(declare-sort x95 0)
(declare-sort x28 0)
(declare-sort x102 0)
(declare-sort x178 0)
(declare-sort x67 0)
(declare-sort x133 0)
(declare-sort x15 0)
(declare-sort x147 0)
(declare-sort x111 0)
(declare-sort x93 0)
(declare-sort x157 0)
(declare-sort x158 0)
(declare-sort x12 0)
(declare-sort x124 0)
(declare-sort x68 0)
(declare-sort x49 0)
(declare-sort x84 0)
(declare-sort x53 0)
(declare-sort x168 0)
(declare-sort x165 0)
(declare-sort x44 0)
(declare-sort x135 0)
(declare-sort x81 0)
(declare-sort x10 0)
(declare-sort x70 0)
(declare-sort x24 0)
(declare-sort x11 0)
(declare-sort x59 0)
(declare-sort x29 0)
(declare-sort x41 0)
(declare-sort x46 0)
(declare-sort x45 0)
(declare-sort x30 0)
(declare-sort x162 0)
(declare-sort x109 0)
(declare-sort x174 0)
(declare-sort x66 0)
(declare-sort x99 0)
(declare-sort x22 0)
(declare-sort x136 0)
(declare-sort x167 0)
(declare-sort x129 0)
(declare-sort x14 0)
(declare-sort x71 0)
(declare-sort x137 0)
(declare-sort x141 0)
(declare-sort x9 0)
(declare-fun x48 (x111 x93) x147)
(declare-fun x51 (x44 x126) x172)
(declare-fun x150 () x11)
(declare-fun x114 () x28)
(declare-fun x43 () x11)
(declare-fun x181 () x135)
(declare-fun x74 () x41)
(declare-fun x142 () x66)
(declare-fun x176 (x158 x157) x1)
(declare-fun x73 () x1)
(declare-fun x100 (x109 x15) x133)
(declare-fun x4 () x172)
(declare-fun x170 () x30)
(declare-fun x91 () x136)
(declare-fun x18 (x59 x121) x84)
(declare-fun x32 () x133)
(declare-fun x77 () x67)
(declare-fun x8 () x99)
(declare-fun x161 () x174)
(declare-fun x97 () x70)
(declare-fun x143 () x129)
(declare-fun x119 () x178)
(declare-fun x117 () x1)
(declare-fun x65 (x178 x120) x102)
(declare-fun x6 () x127)
(declare-fun x7 () x126)
(declare-fun x101 (x70 x126) x121)
(declare-fun x89 () x66)
(declare-fun x47 () x44)
(declare-fun x55 () x11)
(declare-fun x154 () x174)
(declare-fun x37 (x12 x157) x120)
(declare-fun x175 (x9 x59) x141)
(declare-fun x118 () x15)
(declare-fun x96 () x137)
(declare-fun x159 () x31)
(declare-fun x177 (x124 x120) x121)
(declare-fun x180 () x41)
(declare-fun x171 () x158)
(declare-fun x149 () x133)
(declare-fun x85 () x60)
(declare-fun x17 () x167)
(declare-fun x140 (x165 x168) x95)
(declare-fun x36 () x53)
(declare-fun x130 () x12)
(declare-fun x63 (x71 x120) x10)
(declare-fun x72 () x30)
(declare-fun x75 (x168 x120) x120)
(declare-fun x21 (x126 x121) x1)
(declare-fun x16 () x60)
(declare-fun x106 (x22 x59) x127)
(declare-fun x151 (x95 x60) x60)
(declare-fun x54 (x30 x46) x45)
(declare-fun x122 (x29 x70) x1)
(declare-fun x90 (x141 x121) x70)
(declare-fun x94 (x28 x120) x95)
(declare-fun x173 () x111)
(declare-fun x3 () x11)
(declare-fun x112 () x102)
(declare-fun x27 (x45 x10) x1)
(declare-fun x145 (x31 x121) x127)
(declare-fun x82 (x136 x46) x28)
(declare-fun x40 (x84 x121) x121)
(declare-fun x57 () x22)
(declare-fun x144 () x15)
(declare-fun x153 (x99 x46) x95)
(declare-fun x35 (x69 x121) x172)
(declare-fun x108 () x31)
(declare-fun x169 () x95)
(declare-fun x110 (x11 x1) x24)
(declare-fun x115 (x60 x120) x1)
(declare-fun x64 () x49)
(declare-fun x23 (x135 x81) x157)
(declare-fun x78 (x121) x81)
(declare-fun x131 (x41 x59) x29)
(declare-fun x88 (x162 x1) x60)
(declare-fun x76 (x102 x60) x1)
(declare-fun x56 (x127 x126) x126)
(declare-fun x80 () x109)
(declare-fun x13 () x133)
(declare-fun x138 () x31)
(declare-fun x139 () x93)
(declare-fun x134 () x109)
(declare-fun x152 () x60)
(declare-fun x113 () x28)
(declare-fun x155 (x49 x124) x68)
(declare-fun x98 () x1)
(declare-fun x19 () x14)
(declare-fun x128 (x46 x120) x168)
(declare-fun x25 (x167 x59) x31)
(declare-fun x2 (x68 x60) x126)
(declare-fun x156 (x137 x46) x71)
(declare-fun x92 (x14 x59) x1)
(declare-fun x160 () x126)
(declare-fun x116 () x133)
(declare-fun x179 () x67)
(declare-fun x61 (x174 x11) x11)
(declare-fun x26 () x67)
(declare-fun x164 (x129 x46) x1)
(declare-fun x20 (x133 x60) x95)
(declare-fun x33 () x69)
(declare-fun x42 (x66 x44) x67)
(declare-fun x166 () x126)
(declare-fun x58 (x24 x1) x1)
(declare-fun x105 (x67 x126) x127)
(declare-fun x107 () x10)
(declare-fun x34 (x172 x126) x1)
(declare-fun x38 () x9)
(declare-fun x123 (x10 x60) x120)
(declare-fun x86 (x53 x84) x127)
(declare-fun x52 () x28)
(declare-fun x5 (x15 x60) x102)
(declare-fun x62 () x67)
(declare-fun x50 (x147 x126) x60)
(declare-fun x163 () x165)
(declare-fun x148 (x93 x121) x120)
(assert (! (forall ((x132 x121) (x104 x126)) (=> (= (x34 (x35 x33 x132) x104) x98) (=> (forall ((x146 x126)) (=> (= (x56 (x145 x159 x132) x146) x104) (=> (not (= (x34 (x35 x33 x132) x146) x98)) false))) false))) :named smtcomp1))
(assert (! (forall ((x132 x60) (x104 x60)) (= (= x132 x104) (and (= x98 (x76 (x5 x118 x132) x104)) (= (x76 (x5 x118 x104) x132) x98)))) :named smtcomp2))
(assert (! (forall ((x132 x84)) (= (x56 (x86 x36 x132) x166) x166)) :named smtcomp3))
(assert (! (forall ((x132 x46) (x104 x10) (x146 x60) (x39 x120)) (let ((x83 (x151 (x20 x149 x146) (x151 (x94 x114 x39) x16)))) (=> (= x98 (x27 (x54 x72 x132) x104)) (=> (= x98 (x76 x112 x146)) (=> (= x98 (x76 (x65 x119 x39) x146)) (= (x123 x104 x146) (ite (= x16 x83) x39 (x75 (x128 x132 x39) (x123 x104 x83))))))))) :named smtcomp4))
(assert (! (forall ((x132 x126) (x104 x126)) (=> (forall ((x146 x126)) (= x98 (x34 (x51 x47 x132) x146))) (= (x56 (x105 x62 x132) x104) x104))) :named smtcomp5))
(assert (! (forall ((x132 x59) (x104 x70) (x146 x126) (x39 x126)) (let ((x83 (x101 x104 x146))) (=> (= (x122 (x131 x180 x132) x104) x98) (=> (= (x34 x4 x146) x98) (=> (not (= x166 x39)) (=> (= x98 (x34 (x51 x47 x39) x146)) (= (x40 (x18 x132 (x101 x104 x39)) x83) x83))))))) :named smtcomp6))
(assert (! (forall ((x132 x126) (x104 x126)) (=> (= x132 x104) (= x98 (x34 (x51 x47 x132) x104)))) :named smtcomp7))
(assert (! (forall ((x132 x60) (x104 x60) (x146 x60)) (let ((x83 (x5 x118 x132))) (=> (= (x76 x83 x104) x98) (=> (= x146 x104) (= x98 (x76 x83 x146)))))) :named smtcomp8))
(assert (! (forall ((x132 x121) (x104 x126) (x146 x126)) (let ((x83 (x35 x33 x132))) (=> (= (x34 x83 (x56 (x105 x77 x104) x146)) x98) (=> (= (x34 x83 x146) x98) false)))) :named smtcomp9))
(assert (! (forall ((x132 x60) (x104 x60)) (=> (forall ((x146 x60)) (= x98 (x76 (x5 x118 x132) x146))) (= x132 (x151 (x20 x116 x104) x132)))) :named smtcomp10))
(assert (! (forall ((x132 x126) (x104 x126) (x146 x121)) (let ((x83 (x35 x33 x146))) (=> (= (x34 (x51 x47 x132) x104) x98) (=> (= (x34 x83 x132) x98) (= (x34 x83 x104) x98))))) :named smtcomp11))
(assert (! (forall ((x132 x60) (x104 x120) (x146 x60)) (let ((x125 (x5 x118 x132)) (x83 (x94 x114 x104))) (= (= x98 (x76 x125 (x151 x83 x146))) (ite (= x98 (x76 (x65 x119 x104) x132)) (= (x76 (x5 x118 (x151 (x20 x149 x132) (x151 x83 x16))) x146) x98) (= x98 (x76 x125 x146)))))) :named smtcomp12))
(assert (! (forall ((x132 x120) (x104 x60) (x146 x120)) (let ((x83 (x65 x119 x132))) (=> (=> (not (= (x76 x83 x104) x98)) (= x146 x132)) (= (x76 x83 (x151 (x94 x114 x146) x104)) x98)))) :named smtcomp13))
(assert (! (forall ((x132 x120) (x104 x120)) (=> (= x98 (x76 (x65 x119 x132) (x151 (x94 x114 x104) x16))) (=> (=> (= x132 x104) false) false))) :named smtcomp14))
(assert (! (forall ((x132 x126) (x104 x126) (x146 x126)) (let ((x83 (x51 x47 x132))) (=> (= x98 (x34 x83 x104)) (=> (= (x34 (x51 x47 x104) x146) x98) (= (x34 x83 x146) x98))))) :named smtcomp15))
(assert (! (forall ((x132 x60) (x104 x162) (x146 x1) (x39 x1)) (let ((x83 (x5 x118 x132))) (=> (= x98 (x76 x83 (x88 x104 x146))) (=> (= (x58 (x110 x3 x146) x39) x98) (=> (forall ((x79 x1) (x87 x1)) (=> (= (x58 (x110 x3 x79) x87) x98) (= x98 (x76 (x5 x118 (x88 x104 x79)) (x88 x104 x87))))) (= x98 (x76 x83 (x88 x104 x39)))))))) :named smtcomp16))
(assert (! (forall ((x132 x121) (x104 x126) (x146 x126)) (let ((x125 (x56 (x105 x77 x104) x146)) (x83 (x145 x159 x132))) (= (ite (= x98 (x34 (x35 x33 x132) x146)) x125 (x56 x83 x125)) (x56 (x105 x77 (x56 x83 x104)) x146)))) :named smtcomp17))
(assert (! (forall ((x132 x121) (x104 x126) (x146 x126)) (let ((x83 (x35 x33 x132))) (=> (= x98 (x34 x83 (x56 (x105 x77 x104) x146))) (= (x34 x83 x104) x98)))) :named smtcomp18))
(assert (! (forall ((x132 x46) (x104 x120)) (= x104 (x123 (x63 (x156 x96 x132) x104) x16))) :named smtcomp19))
(assert (! (forall ((x132 x59) (x104 x70) (x146 x126)) (=> (= x98 (x122 (x131 x74 x132) x104)) (=> (= (x34 x4 x146) x98) (=> (not (= x146 x166)) (=> (forall ((x39 x121) (x79 x121)) (= (x34 (x35 x33 (x40 (x18 x132 x39) x79)) (x56 (x145 x159 x39) (x56 (x145 x159 x79) x166))) x98)) (= x98 (x34 (x35 x33 (x101 x104 x146)) x146))))))) :named smtcomp20))
(assert (! (forall ((x132 x1)) (= (= (= x117 x98) (= x132 x98)) (= x98 (x58 (x110 x3 x132) x117)))) :named smtcomp21))
(assert (! (forall ((x132 x120)) (= (= (x115 x16 x132) x98) (= x98 x117))) :named smtcomp22))
(assert (! (forall ((x132 x120) (x104 x120) (x146 x60)) (let ((x83 (x65 x119 x132))) (= (= x98 (x76 x83 (x151 (x94 x114 x104) x146))) (or (= x132 x104) (= x98 (x76 x83 x146)))))) :named smtcomp23))
(assert (! (forall ((x132 x121) (x104 x60)) (let ((x83 (x94 x114 (x148 x139 x132)))) (=> (= (x76 (x5 x144 (x151 x83 x104)) (x151 (x94 x114 (x37 x130 (x23 x181 (x78 x132)))) x16)) x98) (= (x76 (x5 x144 x104) (x151 x83 x16)) x98)))) :named smtcomp24))
(assert (! (forall ((x132 x60) (x104 x95) (x146 x60) (x39 x60)) (=> (= (x151 x104 x146) x132) (=> (= x98 (x76 (x5 x118 x39) x146)) (=> (forall ((x79 x60) (x87 x60)) (=> (= x98 (x76 (x5 x118 x87) x79)) (= x98 (x76 (x5 x118 (x151 x104 x87)) (x151 x104 x79))))) (= x98 (x76 (x5 x118 (x151 x104 x39)) x132)))))) :named smtcomp25))
(assert (! (forall ((x132 x46) (x104 x10) (x146 x60) (x39 x120)) (let ((x83 (x123 x104 x146))) (=> (= (x27 (x54 x170 x132) x104) x98) (=> (= (x76 x112 x146) x98) (=> (= x98 (x76 (x65 x119 x39) x146)) (= (x75 (x128 x132 x39) x83) x83)))))) :named smtcomp26))
(assert (! (forall ((x132 x60) (x104 x60) (x146 x60)) (let ((x83 (x5 x118 x132))) (=> (= (x76 x83 x104) x98) (=> (= (x76 (x5 x118 x104) x146) x98) (= x98 (x76 x83 x146)))))) :named smtcomp27))
(assert (! (forall ((x132 x60)) (= (x76 (x5 x118 x132) x132) x98)) :named smtcomp28))
(assert (! (forall ((x132 x121) (x104 x126)) (let ((x83 (x145 x159 x132))) (=> (not (= x98 (x34 (x35 x33 x132) x104))) (= (x56 (x105 x77 (x56 x83 x104)) (x56 x83 x166)) x104)))) :named smtcomp29))
(assert (! (forall ((x132 x126) (x104 x121)) (let ((x83 (x56 (x145 x159 x104) x166))) (=> (= x98 (x34 (x51 x47 x132) x83)) (or (= x132 x83) (= x166 x132))))) :named smtcomp30))
(assert (! (forall ((x132 x60) (x104 x120) (x146 x60)) (let ((x125 (x94 x114 x104)) (x83 (x20 x149 x132))) (= (x151 x83 (x151 x125 x146)) (x151 (x20 x149 (x151 x83 (x151 x125 x16))) x146)))) :named smtcomp31))
(assert (! (forall ((x132 x1)) (= x98 (x58 (x110 x3 x132) x132))) :named smtcomp32))
(assert (! (forall ((x132 x121) (x104 x126)) (let ((x83 (x145 x159 x132))) (=> (= (x34 (x35 x33 x132) x104) x98) (= x104 (x56 x83 (x56 (x105 x77 x104) (x56 x83 x166))))))) :named smtcomp33))
(assert (! (forall ((x132 x60) (x104 x60)) (=> (forall ((x146 x120)) (=> (= x98 (x115 x132 x146)) (= (x115 x104 x146) x98))) (= x98 (x76 (x5 x118 (x151 x169 x132)) (x151 x169 x104))))) :named smtcomp34))
(assert (! (forall ((x132 x93) (x104 x126) (x146 x126)) (let ((x83 (x48 x173 x132))) (= (x76 (x5 x118 (x151 (x20 x149 (x50 x83 x104)) (x50 x83 x146))) (x50 x83 (x56 (x105 x77 x104) x146))) x98))) :named smtcomp35))
(assert (! (forall ((x132 x126) (x104 x172)) (=> (= x98 (x34 x4 x132)) (=> (= (x34 x104 x166) x98) (=> (forall ((x146 x121) (x39 x126)) (=> (= (x34 x4 x39) x98) (=> (not (= (x34 (x35 x33 x146) x39) x98)) (=> (= (x34 x104 x39) x98) (= (x34 x104 (x56 (x145 x159 x146) x39)) x98))))) (= (x34 x104 x132) x98))))) :named smtcomp36))
(assert (! (forall ((x132 x126) (x104 x126)) (=> (forall ((x146 x121)) (= x98 (x58 (x110 x3 (x21 x132 x146)) (x21 x104 x146)))) (= (x34 (x51 x47 x132) x104) x98))) :named smtcomp37))
(assert (! (forall ((x132 x60) (x104 x60)) (=> (= (x76 (x5 x118 x132) x104) x98) (= (= x132 x104) (= x98 (x76 (x5 x118 x104) x132))))) :named smtcomp38))
(assert (! (forall ((x132 x60) (x104 x124) (x146 x126)) (=> (forall ((x39 x120)) (=> (= x98 (x76 (x65 x119 x39) x132)) (= x98 (x34 (x35 x33 (x177 x104 x39)) x146)))) (= (x34 (x51 x47 (x2 (x155 x64 x104) x132)) x146) x98))) :named smtcomp39))
(assert (! (forall ((x132 x120) (x104 x60)) (= (x151 (x94 x114 x132) (x151 x169 x104)) (x151 x169 (x151 (x94 x113 x132) x104)))) :named smtcomp40))
(assert (! (forall ((x132 x126) (x104 x84) (x146 x126)) (= (exists ((x39 x126)) (and (= (x34 (x51 x47 x39) x146) x98) (= x132 (x56 (x86 x36 x104) x39)))) (= (x34 (x51 x47 x132) (x56 (x86 x36 x104) x146)) x98))) :named smtcomp41))
(assert (! (forall ((x132 x120) (x104 x60)) (let ((x83 (x94 x114 x132))) (=> (= x98 (x76 (x65 x119 x132) x104)) (= x104 (x151 x83 (x151 (x20 x149 x104) (x151 x83 x16))))))) :named smtcomp42))
(assert (! (forall ((x132 x46) (x104 x60) (x146 x120) (x39 x120)) (let ((x83 (x63 (x156 x96 x132) x39))) (=> (= (x164 x143 x132) x98) (=> (= x98 (x76 x112 x104)) (=> (not (= (x76 (x65 x119 x146) x104) x98)) (= (x123 x83 (x151 (x94 x114 x146) x104)) (x75 (x128 x132 x146) (x123 x83 x104)))))))) :named smtcomp43))
(assert (! (forall ((x132 x60) (x104 x168) (x146 x60)) (= (= x98 (x76 (x5 x118 x132) (x151 (x140 x163 x104) x146))) (exists ((x39 x60)) (and (= (x76 (x5 x118 x39) x146) x98) (= x132 (x151 (x140 x163 x104) x39)))))) :named smtcomp44))
(assert (! (forall ((x132 x1) (x104 x1)) (=> (forall ((x146 x1)) (= (x58 (x110 x3 x132) x146) x98)) (= (= x104 x98) (= x98 (x58 (x110 x43 x104) x132))))) :named smtcomp45))
(assert (! (forall ((x132 x126)) (= (exists ((x104 x121)) (= (x34 (x35 x33 x104) x132) x98)) (not (= x166 x132)))) :named smtcomp46))
(assert (! (forall ((x132 x126) (x104 x126) (x146 x126)) (let ((x83 (x51 x47 x132))) (=> (= x98 (x34 x83 x104)) (=> (= x146 x104) (= x98 (x34 x83 x146)))))) :named smtcomp47))
(assert (! (forall ((x132 x93) (x104 x126)) (= (= x16 (x50 (x48 x173 x132) x104)) (= x104 x166))) :named smtcomp48))
(assert (! (forall ((x132 x121) (x104 x126) (x146 x126)) (let ((x83 (x35 x33 x132))) (=> (= x98 (x34 x83 x104)) (=> (not (= (x34 x83 x146) x98)) (= (x34 x83 (x56 (x105 x77 x104) x146)) x98))))) :named smtcomp49))
(assert (! (forall ((x132 x60)) (= (or (= x16 x132) (exists ((x104 x60) (x146 x120)) (and (= x132 (x151 (x94 x114 x146) x104)) (= x98 (x76 x112 x104))))) (= x98 (x76 x112 x132)))) :named smtcomp50))
(assert (! (forall ((x132 x126) (x104 x172)) (=> (= x98 (x34 x4 x132)) (=> (= x98 (x34 x104 x132)) (=> (forall ((x146 x121) (x39 x126)) (=> (= x98 (x34 x4 x39)) (=> (= x98 (x34 (x35 x33 x146) x39)) (=> (= x98 (x34 x104 x39)) (= (x34 x104 (x56 (x105 x77 x39) (x56 (x145 x159 x146) x166))) x98))))) (= (x34 x104 x166) x98))))) :named smtcomp51))
(assert (! (forall ((x132 x121) (x104 x121) (x146 x126)) (let ((x83 (x35 x33 x132))) (=> (= x98 (x34 x83 (x56 (x145 x159 x104) x146))) (=> (=> (= x132 x104) false) (=> (=> (= (x34 x83 x146) x98) false) false))))) :named smtcomp52))
(assert (! (forall ((x132 x126) (x104 x126) (x146 x121)) (let ((x83 (x51 x47 x132))) (=> (= (x34 x83 x104) x98) (= x98 (x34 x83 (x56 (x145 x159 x146) x104)))))) :named smtcomp53))
(assert (! (forall ((x132 x126) (x104 x126)) (=> (= (x34 (x51 x47 x132) x104) x98) (=> (= x98 (x34 (x51 x47 x104) x132)) (= x132 x104)))) :named smtcomp54))
(assert (! (forall ((x132 x121) (x104 x126) (x146 x126)) (let ((x83 (x51 x47 x104))) (=> (not (= (x34 (x35 x33 x132) x104) x98)) (= (= x98 (x34 x83 (x56 (x145 x159 x132) x146))) (= (x34 x83 x146) x98))))) :named smtcomp55))
(assert (! (forall ((x132 x46) (x104 x120) (x146 x60) (x39 x120) (x79 x120)) (=> (= x98 (x164 x143 x132)) (=> (= x98 (x115 (x151 (x94 (x82 x91 x132) x104) x146) x39)) (=> (= x98 (x76 (x65 x119 x79) x146)) (exists ((x87 x120)) (and (= x39 (x75 (x128 x132 x79) x87)) (= (x115 (x151 (x94 (x82 x91 x132) x104) (x151 (x20 x149 x146) (x151 (x94 x114 x79) x16))) x87) x98))))))) :named smtcomp56))
(assert (! (forall ((x132 x60) (x104 x60) (x146 x120)) (let ((x83 (x65 x119 x146))) (=> (= x98 (x76 (x5 x118 x132) x104)) (=> (= x98 (x76 x83 x132)) (= x98 (x76 x83 x104)))))) :named smtcomp57))
(assert (! (forall ((x132 x1) (x104 x1) (x146 x162) (x39 x60)) (=> (= x98 (x58 (x110 x3 x132) x104)) (=> (= x98 (x76 (x5 x118 (x88 x146 x104)) x39)) (=> (forall ((x79 x1) (x87 x1)) (=> (= x98 (x58 (x110 x3 x79) x87)) (= (x76 (x5 x118 (x88 x146 x79)) (x88 x146 x87)) x98))) (= x98 (x76 (x5 x118 (x88 x146 x132)) x39)))))) :named smtcomp58))
(assert (! (forall ((x132 x126)) (= (x34 (x51 x47 x132) x132) x98)) :named smtcomp59))
(assert (! (forall ((x132 x60) (x104 x60) (x146 x68) (x39 x126)) (=> (= (x76 (x5 x118 x132) x104) x98) (=> (= (x2 x146 x104) x39) (=> (forall ((x79 x60) (x87 x60)) (=> (= (x76 (x5 x118 x79) x87) x98) (= x98 (x34 (x51 x47 (x2 x146 x79)) (x2 x146 x87))))) (= x98 (x34 (x51 x47 (x2 x146 x132)) x39)))))) :named smtcomp60))
(assert (! (forall ((x132 x60) (x104 x60)) (= (x151 x169 (x151 (x20 x13 x132) x104)) (x151 (x20 x149 x132) x104))) :named smtcomp61))
(assert (! (forall ((x132 x60) (x104 x60)) (=> (forall ((x146 x60)) (= x98 (x76 (x5 x118 x132) x146))) (= x104 (x151 (x20 x32 x132) x104)))) :named smtcomp62))
(assert (! (= (x34 x4 x166) x98) :named smtcomp63))
(assert (! (forall ((x132 x121)) (= false (= x98 (x34 (x35 x33 x132) x166)))) :named smtcomp64))
(assert (! (forall ((x132 x121) (x104 x126) (x146 x120) (x39 x93)) (=> (= x98 (x34 (x35 x33 x132) x104)) (=> (= (x148 x39 x132) x146) (= x98 (x76 (x65 x119 x146) (x50 (x48 x173 x39) x104)))))) :named smtcomp65))
(assert (! (forall ((x132 x121) (x104 x126) (x146 x126)) (= (= x98 (x34 (x51 x47 (x56 (x145 x159 x132) x104)) x146)) (and (= (x34 (x51 x47 x104) x146) x98) (= (x34 (x35 x33 x132) x146) x98)))) :named smtcomp66))
(assert (! (forall ((x132 x126) (x104 x126) (x146 x121)) (let ((x83 (x145 x159 x146))) (=> (= (x34 (x51 x47 x132) x104) x98) (= (x34 (x51 x47 (x56 x83 x132)) (x56 x83 x104)) x98)))) :named smtcomp67))
(assert (! (forall ((x132 x126) (x104 x121)) (=> (= x132 x166) (not (= (x34 (x35 x33 x104) x132) x98)))) :named smtcomp68))
(assert (! (forall ((x132 x59) (x104 x121)) (= x98 (x21 (x56 (x145 (x25 x17 x132) x104) x166) x104))) :named smtcomp69))
(assert (! (forall ((x132 x1) (x104 x1) (x146 x1)) (let ((x83 (x110 x3 x146))) (=> (= (= x104 x98) (= x98 x132)) (=> (= (x58 x83 x104) x98) (= (x58 x83 x132) x98))))) :named smtcomp70))
(assert (! (= (x42 x89 x47) x62) :named smtcomp71))
(assert (! (forall ((x132 x60) (x104 x60) (x146 x120)) (=> (= x98 (x76 (x5 x118 x132) x104)) (= x98 (x58 (x110 x3 (x115 x132 x146)) (x115 x104 x146))))) :named smtcomp72))
(assert (! (forall ((x132 x120) (x104 x60)) (= (x151 (x94 x114 x132) x104) (x151 x169 (x151 (x94 x52 x132) x104)))) :named smtcomp73))
(assert (! (forall ((x132 x60) (x104 x102)) (=> (= (x76 x112 x132) x98) (=> (= x98 (x76 x104 x132)) (=> (forall ((x146 x120) (x39 x60)) (=> (= x98 (x76 x112 x39)) (=> (= (x76 (x65 x119 x146) x39) x98) (=> (= x98 (x76 x104 x39)) (= x98 (x76 x104 (x151 (x20 x149 x39) (x151 (x94 x114 x146) x16)))))))) (= (x76 x104 x16) x98))))) :named smtcomp74))
(assert (! (forall ((x132 x46) (x104 x120) (x146 x120) (x39 x60) (x79 x120)) (=> (= x98 (x164 x143 x132)) (=> (= (x115 (x151 (x94 (x82 x91 x132) x104) (x151 (x94 x114 x146) x39)) x79) x98) (=> (not (= x98 (x76 (x65 x119 x146) x39))) (=> (forall ((x87 x120)) (=> (= (x75 (x128 x132 x146) x87) x79) (=> (= x98 (x115 (x151 (x94 (x82 x91 x132) x104) x39) x87)) false))) false))))) :named smtcomp75))
(assert (! (forall ((x132 x59) (x104 x126) (x146 x121) (x39 x121)) (let ((x83 (x175 x38 x132))) (=> (= x98 (x92 x19 x132)) (=> (= x98 (x34 x4 x104)) (=> (not (= x98 (x34 (x35 x33 x146) x104))) (= (x101 (x90 x83 (x40 (x18 x132 x146) x39)) x104) (x101 (x90 x83 x39) (x56 (x145 x159 x146) x104)))))))) :named smtcomp76))
(assert (! (forall ((x132 x59) (x104 x126) (x146 x121) (x39 x121)) (let ((x125 (x18 x132 x146)) (x83 (x175 x38 x132))) (=> (= x98 (x92 x19 x132)) (=> (= x98 (x34 x4 x104)) (= (x40 x125 (x101 (x90 x83 x39) x104)) (x101 (x90 x83 (x40 x125 x39)) x104)))))) :named smtcomp77))
(assert (! (forall ((x132 x46) (x104 x10) (x146 x60) (x39 x120)) (let ((x83 (x94 x114 x39))) (let ((x125 (x151 (x20 x149 x146) (x151 x83 x16)))) (=> (= (x27 (x54 x72 x132) x104) x98) (=> (= (x76 x112 x146) x98) (= (ite (= x16 x125) x39 (x75 (x128 x132 x39) (x123 x104 x125))) (x123 x104 (x151 x83 x146)))))))) :named smtcomp78))
(assert (! (= x32 (x100 x80 x118)) :named smtcomp79))
(assert (! (forall ((x132 x60) (x104 x60)) (=> (= (x76 (x5 x118 x132) x104) x98) (=> (= (x76 (x5 x118 x104) x132) x98) (= x104 x132)))) :named smtcomp80))
(assert (! (forall ((x132 x120) (x104 x60)) (=> (= x98 (x76 (x65 x119 x132) x104)) (=> (forall ((x146 x60)) (=> (= (x151 (x94 x114 x132) x146) x104) (=> (not (= x98 (x76 (x65 x119 x132) x146))) false))) false))) :named smtcomp81))
(assert (! (forall ((x132 x126) (x104 x126) (x146 x126)) (=> (= (x34 (x51 x47 x132) x104) x98) (=> (= (x34 (x51 x47 x104) x146) x98) (= x132 (x56 (x105 x77 x104) (x56 (x105 x77 x146) x132)))))) :named smtcomp82))
(assert (! (forall ((x132 x93)) (= x16 (x50 (x48 x173 x132) x166))) :named smtcomp83))
(assert (! (forall ((x132 x46) (x104 x60) (x146 x120)) (=> (= x98 (x164 x143 x132)) (=> (= x98 (x76 x112 x104)) (= (x115 (x151 (x94 (x82 x91 x132) x146) x104) (x123 (x63 (x156 x96 x132) x146) x104)) x98)))) :named smtcomp84))
(assert (! (forall ((x132 x84) (x104 x126) (x146 x126)) (let ((x83 (x86 x36 x132))) (= x98 (x34 (x51 x47 (x56 (x105 x77 (x56 x83 x104)) (x56 x83 x146))) (x56 x83 (x56 (x105 x77 x104) x146)))))) :named smtcomp85))
(assert (! (forall ((x132 x1) (x104 x102) (x146 x60) (x39 x60)) (=> (= (= (x76 x104 x146) x98) (= x98 x132)) (=> (= (x76 (x5 x118 x146) x39) x98) (=> (forall ((x79 x60) (x87 x60)) (=> (= (x76 (x5 x118 x79) x87) x98) (= (x58 (x110 x3 (x76 x104 x79)) (x76 x104 x87)) x98))) (= x98 (x58 (x110 x3 x132) (x76 x104 x39))))))) :named smtcomp86))
(assert (! (forall ((x132 x120)) (= false (= (x76 (x65 x119 x132) x16) x98))) :named smtcomp87))
(assert (! (forall ((x132 x126) (x104 x84)) (=> (= x98 (x34 x4 x132)) (= x98 (x34 x4 (x56 (x86 x36 x104) x132))))) :named smtcomp88))
(assert (! (forall ((x132 x59) (x104 x121) (x146 x126) (x39 x121)) (=> (= x98 (x21 (x56 (x106 x57 x132) (x56 (x145 x159 x104) x146)) x39)) (=> (forall ((x79 x121) (x87 x126)) (=> (= (x56 (x145 x159 x104) x146) (x56 (x145 x159 x79) x87)) (=> (= x98 (x21 (x56 (x145 (x25 x17 x132) x79) x87) x39)) (=> (not (= (x34 (x35 x33 x79) x87) x98)) false)))) false))) :named smtcomp89))
(assert (! (forall ((x132 x60) (x104 x60)) (=> (= x132 x104) (= x98 (x76 (x5 x118 x104) x132)))) :named smtcomp90))
(assert (! (forall ((x132 x59) (x104 x70) (x146 x126) (x39 x121)) (=> (= x98 (x122 (x131 x180 x132) x104)) (=> (= (x34 x4 x146) x98) (= (x101 x104 (x56 (x145 x159 x39) x146)) (x101 (x90 (x175 x38 x132) x39) x146))))) :named smtcomp91))
(assert (! (forall ((x132 x126) (x104 x126) (x146 x147) (x39 x60)) (=> (= (x34 (x51 x47 x132) x104) x98) (=> (= (x50 x146 x104) x39) (=> (forall ((x79 x126) (x87 x126)) (=> (= (x34 (x51 x47 x79) x87) x98) (= x98 (x76 (x5 x118 (x50 x146 x79)) (x50 x146 x87))))) (= x98 (x76 (x5 x118 (x50 x146 x132)) x39)))))) :named smtcomp92))
(assert (! (forall ((x132 x126) (x104 x93) (x146 x60)) (=> (forall ((x39 x121)) (=> (= (x34 (x35 x33 x39) x132) x98) (= (x76 (x65 x119 (x148 x104 x39)) x146) x98))) (= x98 (x76 (x5 x118 (x50 (x48 x173 x104) x132)) x146)))) :named smtcomp93))
(assert (! (forall ((x132 x60)) (= (exists ((x104 x120) (x146 x60)) (and (not (= x98 (x76 (x65 x119 x104) x146))) (= (x151 (x94 x114 x104) x146) x132))) (not (= x132 x16)))) :named smtcomp94))
(assert (! (forall ((x132 x120) (x104 x60) (x146 x60)) (let ((x83 (x65 x119 x132))) (= (= (x76 x83 (x151 (x20 x149 x104) x146)) x98) (and (not (= x98 (x76 x83 x146))) (= x98 (x76 x83 x104)))))) :named smtcomp95))
(assert (! (forall ((x132 x1) (x104 x1) (x146 x1)) (let ((x83 (x110 x3 x132))) (=> (= (x58 x83 x104) x98) (=> (= x98 (x58 (x110 x3 x104) x146)) (= (x58 x83 x146) x98))))) :named smtcomp96))
(assert (! (forall ((x132 x60) (x104 x60) (x146 x60)) (=> (= x98 (x76 (x5 x118 x132) x104)) (=> (= x146 x132) (= (x76 (x5 x118 x146) x104) x98)))) :named smtcomp97))
(assert (! (forall ((x132 x60) (x104 x60) (x146 x168) (x39 x168)) (=> (= x132 x104) (=> (forall ((x79 x120)) (=> (= x98 (x76 (x65 x119 x79) x104)) (= (x75 x39 x79) (x75 x146 x79)))) (= (x151 (x140 x163 x39) x104) (x151 (x140 x163 x146) x132))))) :named smtcomp98))
(assert (! (forall ((x132 x126) (x104 x126)) (=> (= (x34 (x51 x47 x132) x104) x98) (= (= x98 (x34 (x51 x47 x104) x132)) (= x104 x132)))) :named smtcomp99))
(assert (! (forall ((x132 x121) (x104 x126) (x146 x126)) (let ((x83 (x35 x33 x132))) (= (= x98 (x34 x83 (x56 (x105 x77 x104) x146))) (and (not (= (x34 x83 x146) x98)) (= x98 (x34 x83 x104)))))) :named smtcomp100))
(assert (! (forall ((x132 x60) (x104 x120) (x146 x60)) (let ((x83 (x94 x114 x104))) (=> (= x98 (x76 (x5 x118 (x151 (x20 x149 x132) (x151 x83 x16))) x146)) (=> (= x98 (x76 (x65 x119 x104) x132)) (= (x76 (x5 x118 x132) (x151 x83 x146)) x98))))) :named smtcomp101))
(assert (! (forall ((x132 x120) (x104 x60) (x146 x60)) (let ((x125 (x151 (x20 x149 x104) x146)) (x83 (x94 x114 x132))) (= (ite (= (x76 (x65 x119 x132) x146) x98) x125 (x151 x83 x125)) (x151 (x20 x149 (x151 x83 x104)) x146)))) :named smtcomp102))
(assert (! (forall ((x132 x120) (x104 x60) (x146 x120)) (= (=> (not (= x146 x132)) (= (x115 x104 x146) x98)) (= x98 (x115 (x151 (x94 x113 x132) x104) x146)))) :named smtcomp103))
(assert (! (forall ((x132 x121) (x104 x84) (x146 x126)) (= (= (x34 (x35 x33 x132) (x56 (x86 x36 x104) x146)) x98) (exists ((x39 x121)) (and (= (x40 x104 x39) x132) (= x98 (x34 (x35 x33 x39) x146)))))) :named smtcomp104))
(assert (! (forall ((x132 x120) (x104 x93) (x146 x121) (x39 x126)) (=> (= (x148 x104 x146) x132) (=> (= x98 (x34 (x35 x33 x146) x39)) (= x98 (x76 (x65 x119 x132) (x50 (x48 x173 x104) x39)))))) :named smtcomp105))
(assert (! (forall ((x132 x120) (x104 x60) (x146 x60)) (let ((x83 (x65 x119 x132))) (=> (= (x76 x83 (x151 (x20 x149 x104) x146)) x98) (=> (= (x76 x83 x146) x98) false)))) :named smtcomp106))
(assert (! (forall ((x132 x126)) (= (x56 (x105 x77 x166) x132) x166)) :named smtcomp107))
(assert (! (forall ((x132 x120) (x104 x60)) (not (= x16 (x151 (x94 x114 x132) x104)))) :named smtcomp108))
(assert (! (= x43 (x61 x161 x3)) :named smtcomp109))
(assert (! (forall ((x132 x126) (x104 x126)) (=> (= x104 x132) (=> (=> (= x98 (x34 (x51 x47 x132) x104)) (=> (= (x34 (x51 x47 x104) x132) x98) false)) false))) :named smtcomp110))
(assert (! (forall ((x132 x60) (x104 x60) (x146 x120)) (let ((x83 (x65 x119 x146))) (= (= (x115 (x151 (x20 x13 x132) x104) x146) x98) (and (not (= x98 (x76 x83 x104))) (= x98 (x76 x83 x132)))))) :named smtcomp111))
(assert (! (forall ((x132 x126) (x104 x126) (x146 x121)) (= (= x98 (x58 (x110 x150 (x21 x132 x146)) (x21 x104 x146))) (= (x21 (x56 (x105 x77 x132) x104) x146) x98))) :named smtcomp112))
(assert (! (forall ((x132 x126)) (= (forall ((x104 x121)) (not (= (x21 x132 x104) x98))) (= x166 (x56 x6 x132)))) :named smtcomp113))
(assert (! (forall ((x132 x168) (x104 x60)) (= (= x16 x104) (= x16 (x151 (x140 x163 x132) x104)))) :named smtcomp114))
(assert (! (forall ((x132 x121) (x104 x124) (x146 x60)) (= (exists ((x39 x120)) (and (= (x76 (x65 x119 x39) x146) x98) (= (x177 x104 x39) x132))) (= x98 (x34 (x35 x33 x132) (x2 (x155 x64 x104) x146))))) :named smtcomp115))
(assert (! (forall ((x132 x121) (x104 x126)) (= (= x98 (x34 x4 (x56 (x145 x159 x132) x104))) (= x98 (x34 x4 x104)))) :named smtcomp116))
(assert (! (forall ((x132 x126) (x104 x126)) (= (x56 x6 (x56 (x105 x26 x132) x104)) (x56 (x105 x77 x132) x104))) :named smtcomp117))
(assert (! (forall ((x132 x121) (x104 x126) (x146 x121)) (= (or (= (x21 x104 x146) x98) (= x132 x146)) (= (x21 (x56 (x145 x159 x132) x104) x146) x98))) :named smtcomp118))
(assert (! (forall ((x132 x120) (x104 x60)) (let ((x83 (x94 x114 x132))) (=> (not (= x98 (x76 (x65 x119 x132) x104))) (= (x151 (x20 x149 (x151 x83 x104)) (x151 x83 x16)) x104)))) :named smtcomp119))
(assert (! (forall ((x132 x121) (x104 x126)) (let ((x83 (x145 x159 x132))) (= (x56 x83 x104) (x56 x83 (x56 (x105 x77 x104) (x56 x83 x166)))))) :named smtcomp120))
(assert (! (forall ((x132 x121) (x104 x124) (x146 x120) (x39 x60)) (=> (= (x177 x104 x146) x132) (=> (= x98 (x76 (x65 x119 x146) x39)) (= (x34 (x35 x33 x132) (x2 (x155 x64 x104) x39)) x98)))) :named smtcomp121))
(assert (! (forall ((x132 x120) (x104 x60)) (= (= x98 (x115 x104 x132)) (= x98 (x76 (x65 x119 x132) x104)))) :named smtcomp122))
(assert (! (forall ((x132 x124) (x104 x60) (x146 x60)) (let ((x83 (x155 x64 x132))) (= (x34 (x51 x47 (x56 (x105 x77 (x2 x83 x104)) (x2 x83 x146))) (x2 x83 (x151 (x20 x149 x104) x146))) x98))) :named smtcomp123))
(assert (! (forall ((x132 x121) (x104 x121)) (=> (= (x56 (x145 x159 x104) x166) (x56 (x145 x159 x132) x166)) (= x132 x104))) :named smtcomp124))
(assert (! (forall ((x132 x121) (x104 x126) (x146 x121) (x39 x84)) (=> (= x98 (x34 (x35 x33 x132) x104)) (=> (= (x40 x39 x132) x146) (= x98 (x34 (x35 x33 x146) (x56 (x86 x36 x39) x104)))))) :named smtcomp125))
(assert (! (forall ((x132 x126) (x104 x126)) (=> (= x98 (x34 (x51 x47 x132) x104)) (=> (= x98 (x34 (x51 x47 x104) x132)) (= x104 x132)))) :named smtcomp126))
(assert (! (forall ((x132 x60) (x104 x168) (x146 x60)) (=> (= (x76 x112 x132) x98) (=> (= x98 (x76 (x5 x118 x132) (x151 (x140 x163 x104) x146))) (exists ((x39 x60)) (and (and (= (x151 (x140 x163 x104) x39) x132) (= x98 (x76 x112 x39))) (= (x76 (x5 x118 x39) x146) x98)))))) :named smtcomp127))
(assert (! (forall ((x132 x59) (x104 x126) (x146 x121) (x39 x121)) (let ((x83 (x90 (x175 x38 x132) x39))) (=> (= (x92 x19 x132) x98) (=> (= x98 (x34 x4 x104)) (=> (not (= (x34 (x35 x33 x146) x104) x98)) (= (x40 (x18 x132 x146) (x101 x83 x104)) (x101 x83 (x56 (x145 x159 x146) x104)))))))) :named smtcomp128))
(assert (! (forall ((x132 x60)) (= (forall ((x104 x120)) (not (= x98 (x115 x132 x104)))) (= (x151 x169 x132) x16))) :named smtcomp129))
(assert (! (forall ((x132 x46) (x104 x120) (x146 x60) (x39 x120)) (= (= (x115 (x151 (x94 (x82 x91 x132) x104) x146) x39) x98) (or (exists ((x79 x120) (x87 x60) (x103 x120)) (and (and (= (x75 (x128 x132 x79) x103) x39) (and (not (= x98 (x76 (x65 x119 x79) x87))) (= (x115 (x151 (x94 (x82 x91 x132) x104) x87) x103) x98))) (= x146 (x151 (x94 x114 x79) x87)))) (and (= x16 x146) (= x39 x104))))) :named smtcomp130))
(assert (! (forall ((x132 x60) (x104 x60)) (=> (= x98 (x76 x112 x132)) (= (= (x76 x112 x104) x98) (= (x76 x112 (x151 (x20 x149 x104) x132)) x98)))) :named smtcomp131))
(assert (! (forall ((x132 x120) (x104 x60) (x146 x120) (x39 x168)) (=> (= x98 (x76 (x65 x119 x132) x104)) (=> (= x146 (x75 x39 x132)) (= x98 (x76 (x65 x119 x146) (x151 (x140 x163 x39) x104)))))) :named smtcomp132))
(assert (! (forall ((x132 x126) (x104 x126)) (=> (= (x34 x4 x132) x98) (= x98 (x34 x4 (x56 (x105 x77 x132) x104))))) :named smtcomp133))
(assert (! (forall ((x132 x120) (x104 x60) (x146 x60)) (let ((x83 (x65 x119 x132))) (=> (= (x76 x83 (x151 (x20 x149 x104) x146)) x98) (=> (=> (= x98 (x76 x83 x104)) (=> (not (= (x76 x83 x146) x98)) false)) false)))) :named smtcomp134))
(assert (! (forall ((x132 x126) (x104 x126) (x146 x126)) (let ((x83 (x51 x47 x146))) (=> (= x132 x104) (=> (= (x34 x83 x104) x98) (= x98 (x34 x83 x132)))))) :named smtcomp135))
(assert (! (forall ((x132 x121) (x104 x126) (x146 x121)) (= (=> (not (= x146 x132)) (= (x21 x104 x146) x98)) (= x98 (x21 (x56 (x145 x108 x132) x104) x146)))) :named smtcomp136))
(assert (! (forall ((x132 x126)) (= x98 (x34 (x51 x47 x166) x132))) :named smtcomp137))
(assert (! (forall ((x132 x120) (x104 x168) (x146 x60)) (= (= (x76 (x65 x119 x132) (x151 (x140 x163 x104) x146)) x98) (exists ((x39 x120)) (and (= (x75 x104 x39) x132) (= x98 (x76 (x65 x119 x39) x146)))))) :named smtcomp138))
(assert (! (forall ((x132 x60) (x104 x60) (x146 x102) (x39 x1)) (=> (= x98 (x76 (x5 x118 x132) x104)) (=> (= (= x98 (x76 x146 x104)) (= x39 x98)) (=> (forall ((x79 x60) (x87 x60)) (=> (= (x76 (x5 x118 x79) x87) x98) (= x98 (x58 (x110 x3 (x76 x146 x79)) (x76 x146 x87))))) (= x98 (x58 (x110 x3 (x76 x146 x132)) x39)))))) :named smtcomp139))
(assert (! (forall ((x132 x59) (x104 x70) (x146 x84) (x39 x126)) (=> (= x98 (x122 (x131 x180 x132) x104)) (=> (forall ((x79 x121) (x87 x121)) (= (x40 x146 (x40 (x18 x132 x79) x87)) (x40 (x18 x132 (x40 x146 x79)) (x40 x146 x87)))) (=> (= (x34 x4 x39) x98) (=> (not (= x39 x166)) (= (x40 x146 (x101 x104 x39)) (x101 x104 (x56 (x86 x36 x146) x39)))))))) :named smtcomp140))
(assert (! (forall ((x132 x60) (x104 x60) (x146 x60)) (let ((x83 (x5 x118 x146))) (=> (= x104 x132) (=> (= (x76 x83 x104) x98) (= x98 (x76 x83 x132)))))) :named smtcomp141))
(assert (! (forall ((x132 x60) (x104 x126) (x146 x124)) (=> (= x98 (x76 x112 x132)) (=> (= (x34 (x51 x47 x104) (x2 (x155 x64 x146) x132)) x98) (= x98 (x34 x4 x104))))) :named smtcomp142))
(assert (! (forall ((x132 x60) (x104 x60)) (=> (forall ((x146 x120)) (let ((x83 (x65 x119 x146))) (=> (= (x76 x83 x132) x98) (= x98 (x76 x83 x104))))) (= x98 (x76 (x5 x118 x132) x104)))) :named smtcomp143))
(assert (! (forall ((x132 x126) (x104 x68) (x146 x60) (x39 x60)) (=> (= (x2 x104 x146) x132) (=> (= (x76 (x5 x118 x146) x39) x98) (=> (forall ((x79 x60) (x87 x60)) (=> (= x98 (x76 (x5 x118 x79) x87)) (= x98 (x34 (x51 x47 (x2 x104 x79)) (x2 x104 x87))))) (= x98 (x34 (x51 x47 x132) (x2 x104 x39))))))) :named smtcomp144))
(assert (! (forall ((x132 x60)) (= (forall ((x104 x120)) (=> (= x98 (x76 (x65 x119 x104) x16)) (= x98 (x115 x132 x104)))) true)) :named smtcomp145))
(assert (! (forall ((x132 x84) (x104 x126)) (= (= x166 (x56 (x86 x36 x132) x104)) (= x166 x104))) :named smtcomp146))
(assert (! (forall ((x132 x60) (x104 x60) (x146 x124) (x39 x124)) (=> (= x104 x132) (=> (forall ((x79 x120)) (=> (= (x76 (x65 x119 x79) x104) x98) (= (x177 x39 x79) (x177 x146 x79)))) (= (x2 (x155 x64 x146) x132) (x2 (x155 x64 x39) x104))))) :named smtcomp147))
(assert (! (forall ((x132 x120) (x104 x60)) (let ((x83 (x94 x114 x132))) (let ((x125 (x151 x83 x104))) (= (x151 x83 x125) x125)))) :named smtcomp148))
(assert (! (forall ((x132 x60) (x104 x60) (x146 x168)) (let ((x83 (x140 x163 x146))) (=> (= (x76 (x5 x118 x132) x104) x98) (= x98 (x76 (x5 x118 (x151 x83 x132)) (x151 x83 x104)))))) :named smtcomp149))
(assert (! (forall ((x132 x120) (x104 x60) (x146 x60)) (let ((x83 (x65 x119 x132))) (=> (= (x76 x83 (x151 (x20 x149 x104) x146)) x98) (= (x76 x83 x104) x98)))) :named smtcomp150))
(assert (! (forall ((x132 x59) (x104 x70) (x146 x126) (x39 x121)) (=> (= (x122 (x131 x74 x132) x104) x98) (=> (= x98 (x34 x4 x146)) (=> (not (= x98 (x34 (x35 x33 x39) x146))) (= (x101 x104 (x56 (x145 x159 x39) x146)) (x101 (x90 (x175 x38 x132) x39) x146)))))) :named smtcomp151))
(assert (! (forall ((x132 x120) (x104 x120) (x146 x60)) (let ((x83 (x65 x119 x132))) (=> (= (x76 x83 (x151 (x94 x114 x104) x146)) x98) (=> (=> (= x132 x104) false) (=> (=> (= (x76 x83 x146) x98) false) false))))) :named smtcomp152))
(assert (! (forall ((x132 x60) (x104 x60)) (=> (forall ((x146 x120)) (= x98 (x58 (x110 x3 (x115 x132 x146)) (x115 x104 x146)))) (= (x76 (x5 x118 x132) x104) x98))) :named smtcomp153))
(assert (! (forall ((x132 x60)) (=> (= x98 (x76 (x5 x118 x132) x16)) (= x16 x132))) :named smtcomp154))
(assert (! (forall ((x132 x60)) (= (= x98 (x76 (x5 x118 x132) x16)) (= x16 x132))) :named smtcomp155))
(assert (! (forall ((x132 x60) (x104 x60)) (= (x76 (x5 x118 (x151 (x20 x149 x132) x104)) x132) x98)) :named smtcomp156))
(assert (! (forall ((x132 x126) (x104 x126) (x146 x60) (x39 x147)) (let ((x83 (x5 x118 x146))) (=> (= x98 (x34 (x51 x47 x132) x104)) (=> (= x98 (x76 x83 (x50 x39 x132))) (=> (forall ((x79 x126) (x87 x126)) (=> (= x98 (x34 (x51 x47 x87) x79)) (= x98 (x76 (x5 x118 (x50 x39 x87)) (x50 x39 x79))))) (= x98 (x76 x83 (x50 x39 x104)))))))) :named smtcomp157))
(assert (! (forall ((x132 x120) (x104 x60) (x146 x60)) (let ((x125 (x94 x114 x132)) (x83 (x65 x119 x132))) (=> (not (= (x76 x83 x104) x98)) (=> (not (= (x76 x83 x146) x98)) (= (= x104 x146) (= (x151 x125 x146) (x151 x125 x104))))))) :named smtcomp158))
(assert (! (forall ((x132 x126) (x104 x124) (x146 x60)) (= (= (x34 (x51 x47 x132) (x2 (x155 x64 x104) x146)) x98) (exists ((x39 x60)) (and (= (x2 (x155 x64 x104) x39) x132) (= x98 (x76 (x5 x118 x39) x146)))))) :named smtcomp159))
(assert (! (forall ((x132 x126)) (= true (forall ((x104 x121)) (=> (= (x34 (x35 x33 x104) x166) x98) (= x98 (x21 x132 x104)))))) :named smtcomp160))
(assert (! (forall ((x132 x120) (x104 x168) (x146 x120) (x39 x60)) (=> (= (x75 x104 x146) x132) (=> (= x98 (x76 (x65 x119 x146) x39)) (= (x76 (x65 x119 x132) (x151 (x140 x163 x104) x39)) x98)))) :named smtcomp161))
(assert (! (forall ((x132 x124) (x104 x60)) (= (= x104 x16) (= x166 (x2 (x155 x64 x132) x104)))) :named smtcomp162))
(assert (! (forall ((x132 x121) (x104 x126)) (= x98 (x34 (x35 x33 x132) (x56 (x145 x159 x132) x104)))) :named smtcomp163))
(assert (! (forall ((x132 x1)) (=> (= x98 (x58 (x110 x3 x132) x117)) (= (= x98 x132) (= x98 x117)))) :named smtcomp164))
(assert (! (forall ((x132 x46) (x104 x120) (x146 x120) (x39 x120)) (let ((x83 (x128 x132 x146)) (x125 (x128 x132 x104))) (=> (= x98 (x164 x143 x132)) (= (x75 x125 (x75 x83 x39)) (x75 x83 (x75 x125 x39)))))) :named smtcomp165))
(assert (! (forall ((x132 x59) (x104 x70) (x146 x121)) (=> (= (x122 (x131 x180 x132) x104) x98) (= (x40 (x18 x132 x146) x146) x146))) :named smtcomp166))
(assert (! (forall ((x132 x59) (x104 x121) (x146 x121)) (=> (= (x21 (x56 (x145 (x25 x17 x132) x104) x166) x146) x98) (=> (=> (= x146 x104) false) false))) :named smtcomp167))
(assert (! (forall ((x132 x120) (x104 x60) (x146 x124)) (=> (= (x76 (x65 x119 x132) x104) x98) (= (x34 (x35 x33 (x177 x146 x132)) (x2 (x155 x64 x146) x104)) x98))) :named smtcomp168))
(assert (! (forall ((x132 x60)) (= (x151 x169 x132) x132)) :named smtcomp169))
(assert (! (forall ((x132 x126)) (=> (= x98 (x34 (x51 x47 x132) x166)) (= x166 x132))) :named smtcomp170))
(assert (! (forall ((x132 x121)) (= (= x98 (x21 x7 x132)) false)) :named smtcomp171))
(assert (! (forall ((x132 x126) (x104 x126)) (= (and (= (x34 (x51 x47 x132) x104) x98) (= (x34 (x51 x47 x104) x132) x98)) (= x104 x132))) :named smtcomp172))
(assert (! (forall ((x132 x121) (x104 x121)) (= (= x132 x104) (= x98 (x34 (x35 x33 x132) (x56 (x145 x159 x104) x166))))) :named smtcomp173))
(assert (! (forall ((x132 x126) (x104 x126) (x146 x121)) (=> (= x98 (x34 (x51 x47 x132) x104)) (=> (=> (= x98 (x58 (x110 x3 (x21 x132 x146)) (x21 x104 x146))) false) false))) :named smtcomp174))
(assert (! (forall ((x132 x60) (x104 x147) (x146 x126) (x39 x126)) (=> (= x132 (x50 x104 x146)) (=> (= x98 (x34 (x51 x47 x146) x39)) (=> (forall ((x79 x126) (x87 x126)) (=> (= (x34 (x51 x47 x79) x87) x98) (= (x76 (x5 x118 (x50 x104 x79)) (x50 x104 x87)) x98))) (= (x76 (x5 x118 x132) (x50 x104 x39)) x98))))) :named smtcomp175))
(assert (! (= x16 (x151 x169 x152)) :named smtcomp176))
(assert (! (forall ((x132 x120) (x104 x120) (x146 x60)) (let ((x83 (x94 x114 x104)) (x125 (x94 x114 x132))) (= (x151 x125 (x151 x83 x146)) (x151 x83 (x151 x125 x146))))) :named smtcomp177))
(assert (! (forall ((x132 x126) (x104 x126) (x146 x121)) (let ((x83 (x35 x33 x146))) (=> (= x98 (x34 (x51 x47 x132) x104)) (=> (= (x34 x83 x132) x98) (= x98 (x34 x83 x104)))))) :named smtcomp178))
(assert (! (forall ((x132 x1) (x104 x1) (x146 x1)) (let ((x83 (x110 x3 x132))) (=> (= (x58 x83 x104) x98) (=> (= (= x98 x104) (= x146 x98)) (= (x58 x83 x146) x98))))) :named smtcomp179))
(assert (! (forall ((x132 x59) (x104 x121) (x146 x126) (x39 x121) (x79 x121)) (=> (= (x92 x19 x132) x98) (=> (= x98 (x21 (x56 (x145 (x25 x17 x132) x104) x146) x39)) (=> (= x98 (x34 (x35 x33 x79) x146)) (exists ((x87 x121)) (and (= (x21 (x56 (x145 (x25 x17 x132) x104) (x56 (x105 x77 x146) (x56 (x145 x159 x79) x166))) x87) x98) (= x39 (x40 (x18 x132 x79) x87)))))))) :named smtcomp180))
(assert (! (= (x100 x134 x118) x116) :named smtcomp181))
(assert (! (forall ((x132 x1) (x104 x1)) (=> (= (x58 (x110 x3 x132) x104) x98) (=> (= (x58 (x110 x3 x104) x132) x98) (= (= x98 x132) (= x104 x98))))) :named smtcomp182))
(assert (! (forall ((x132 x126) (x104 x124) (x146 x60)) (=> (= x98 (x34 x4 x132)) (=> (= x98 (x34 (x51 x47 x132) (x2 (x155 x64 x104) x146))) (exists ((x39 x60)) (and (= x98 (x76 (x5 x118 x39) x146)) (and (= (x2 (x155 x64 x104) x39) x132) (= (x76 x112 x39) x98))))))) :named smtcomp183))
(assert (! (forall ((x132 x1) (x104 x1) (x146 x1)) (=> (= (= x132 x98) (= x104 x98)) (=> (= x98 (x58 (x110 x3 x104) x146)) (= x98 (x58 (x110 x3 x132) x146))))) :named smtcomp184))
(assert (! (forall ((x132 x126) (x104 x126)) (=> (= x104 x132) (= (x34 (x51 x47 x132) x104) x98))) :named smtcomp185))
(assert (! (forall ((x132 x60) (x104 x60)) (=> (= x104 x132) (=> (=> (= x98 (x76 (x5 x118 x132) x104)) (=> (= (x76 (x5 x118 x104) x132) x98) false)) false))) :named smtcomp186))
(assert (! (forall ((x132 x60)) (= (forall ((x104 x120)) (not (= (x115 x132 x104) x98))) (= (x151 x169 x132) x16))) :named smtcomp187))
(assert (! (forall ((x132 x120) (x104 x60)) (= (x76 (x65 x119 x132) (x151 (x94 x114 x132) x104)) x98)) :named smtcomp188))
(assert (! (forall ((x132 x126) (x104 x126) (x146 x84) (x39 x84)) (=> (= x104 x132) (=> (forall ((x79 x121)) (=> (= x98 (x34 (x35 x33 x79) x104)) (= (x40 x146 x79) (x40 x39 x79)))) (= (x56 (x86 x36 x39) x104) (x56 (x86 x36 x146) x132))))) :named smtcomp189))
(assert (! (forall ((x132 x120) (x104 x60)) (= (= (x76 x112 x104) x98) (= x98 (x76 x112 (x151 (x94 x114 x132) x104))))) :named smtcomp190))
(assert (! (forall ((x132 x60) (x104 x60) (x146 x60)) (=> (= x98 (x76 (x5 x118 x132) x104)) (=> (= (x76 (x5 x118 x104) x146) x98) (= (x151 (x20 x149 x104) (x151 (x20 x149 x146) x132)) x132)))) :named smtcomp191))
(assert (! (forall ((x132 x60)) (= x98 (x76 (x5 x118 x132) x132))) :named smtcomp192))
(assert (! (forall ((x132 x60) (x104 x60) (x146 x120)) (let ((x83 (x5 x118 x132))) (=> (= x98 (x76 x83 x104)) (= x98 (x76 x83 (x151 (x94 x114 x146) x104)))))) :named smtcomp193))
(assert (! (forall ((x132 x168)) (= (x151 (x140 x163 x132) x16) x16)) :named smtcomp194))
(assert (! (forall ((x132 x126) (x104 x126)) (=> (forall ((x146 x121)) (=> (= (x21 x132 x146) x98) (= x98 (x21 x104 x146)))) (= x98 (x34 (x51 x47 (x56 x6 x132)) (x56 x6 x104))))) :named smtcomp195))
(assert (! (forall ((x132 x93) (x104 x126)) (= (= x16 (x50 (x48 x173 x132) x104)) (= x104 x166))) :named smtcomp196))
(assert (! (forall ((x132 x46) (x104 x120) (x146 x60) (x39 x120)) (=> (= x98 (x164 x143 x132)) (=> (= (x115 (x151 (x94 (x82 x91 x132) x104) x146) x39) x98) (= (x123 (x63 (x156 x96 x132) x104) x146) x39)))) :named smtcomp197))
(assert (! (forall ((x132 x1) (x104 x1)) (=> (forall ((x146 x1)) (= x98 (x58 (x110 x3 x132) x146))) (= (= (x58 (x110 x55 x104) x132) x98) (= x132 x98)))) :named smtcomp198))
(assert (! (forall ((x132 x126) (x104 x126)) (=> (= (x34 (x51 x47 x132) x104) x98) (=> (= x98 (x34 (x51 x47 x104) x132)) (= x132 x104)))) :named smtcomp199))
(assert (! (forall ((x132 x121) (x104 x126) (x146 x93)) (=> (= x98 (x34 (x35 x33 x132) x104)) (= (x76 (x65 x119 (x148 x146 x132)) (x50 (x48 x173 x146) x104)) x98))) :named smtcomp200))
(assert (! (forall ((x132 x59) (x104 x121) (x146 x121)) (= (= x98 (x21 (x56 (x106 x57 x132) (x56 (x145 x159 x104) x166)) x146)) (= x104 x146))) :named smtcomp201))
(assert (! (forall ((x132 x59) (x104 x70) (x146 x126) (x39 x121)) (let ((x83 (x101 x104 x146))) (=> (= (x122 (x131 x180 x132) x104) x98) (=> (= x98 (x34 x4 x146)) (=> (= x98 (x34 (x35 x33 x39) x146)) (= x83 (x40 (x18 x132 x39) x83))))))) :named smtcomp202))
(assert (! (forall ((x132 x59) (x104 x121) (x146 x121) (x39 x121)) (let ((x125 (x18 x132 x104)) (x83 (x18 x132 x146))) (=> (= x98 (x92 x19 x132)) (= (x40 x83 (x40 x125 x39)) (x40 x125 (x40 x83 x39)))))) :named smtcomp203))
(assert (! (forall ((x132 x60)) (= (x151 (x20 x149 x132) x132) x16)) :named smtcomp204))
(assert (! (forall ((x132 x126) (x104 x126) (x146 x93)) (let ((x83 (x48 x173 x146))) (=> (= x98 (x34 (x51 x47 x132) x104)) (= x98 (x76 (x5 x118 (x50 x83 x132)) (x50 x83 x104)))))) :named smtcomp205))
(assert (! (forall ((x132 x120) (x104 x60)) (=> (= (x76 (x65 x119 x132) x104) x98) (exists ((x146 x60)) (and (not (= x98 (x76 (x65 x119 x132) x146))) (= x104 (x151 (x94 x114 x132) x146)))))) :named smtcomp206))
(assert (! (forall ((x132 x126) (x104 x126) (x146 x126)) (=> (= x132 x104) (=> (= (x34 (x51 x47 x104) x146) x98) (= (x34 (x51 x47 x132) x146) x98)))) :named smtcomp207))
(assert (! (forall ((x132 x1) (x104 x1) (x146 x162) (x39 x60)) (=> (= x98 (x58 (x110 x3 x132) x104)) (=> (= x39 (x88 x146 x104)) (=> (forall ((x79 x1) (x87 x1)) (=> (= (x58 (x110 x3 x79) x87) x98) (= (x76 (x5 x118 (x88 x146 x79)) (x88 x146 x87)) x98))) (= x98 (x76 (x5 x118 (x88 x146 x132)) x39)))))) :named smtcomp208))
(assert (! (forall ((x132 x46) (x104 x60) (x146 x120)) (=> (= (x115 (x151 (x153 x8 x132) x104) x146) x98) (not (= x104 x16)))) :named smtcomp209))
(assert (! (forall ((x132 x126) (x104 x121) (x146 x126)) (let ((x125 (x145 x159 x104)) (x83 (x105 x77 x132))) (= (x56 x83 (x56 x125 x146)) (x56 (x105 x77 (x56 x83 x146)) (x56 x125 x166))))) :named smtcomp210))
(assert (! (forall ((x132 x60) (x104 x60) (x146 x120)) (let ((x83 (x94 x114 x146))) (=> (= x98 (x76 (x5 x118 x132) x104)) (= (x76 (x5 x118 (x151 x83 x132)) (x151 x83 x104)) x98)))) :named smtcomp211))
(assert (! (forall ((x132 x60) (x104 x120)) (= x98 (x76 (x5 x118 x132) (x151 (x94 x114 x104) x132)))) :named smtcomp212))
(assert (! (forall ((x132 x121) (x104 x126)) (=> (= x98 (x34 (x35 x33 x132) x104)) (= (x56 (x145 x159 x132) x104) x104))) :named smtcomp213))
(assert (! (forall ((x132 x60) (x104 x60) (x146 x102)) (=> (= (x76 x112 x132) x98) (=> (= x98 (x76 (x5 x118 x132) x104)) (=> (= (x76 x146 x16) x98) (=> (forall ((x39 x120) (x79 x60)) (let ((x83 (x65 x119 x39))) (=> (= x98 (x76 x112 x79)) (=> (= (x76 x83 x104) x98) (=> (not (= (x76 x83 x79) x98)) (=> (= x98 (x76 x146 x79)) (= (x76 x146 (x151 (x94 x114 x39) x79)) x98))))))) (= (x76 x146 x132) x98)))))) :named smtcomp214))
(assert (! (forall ((x132 x60) (x104 x60)) (=> (= x98 (x76 (x5 x118 x132) x104)) (=> (= x98 (x76 (x5 x118 x104) x132)) (= x104 x132)))) :named smtcomp215))
(assert (! (forall ((x132 x46) (x104 x120) (x146 x120)) (=> (= (x115 (x151 (x94 (x82 x91 x132) x104) x16) x146) x98) (=> (=> (= x104 x146) false) false))) :named smtcomp216))
(assert (! (forall ((x132 x126) (x104 x126)) (=> (= (x34 x4 x132) x98) (= (= x98 (x34 x4 x104)) (= (x34 x4 (x56 (x105 x77 x104) x132)) x98)))) :named smtcomp217))
(assert (! (forall ((x132 x126) (x104 x121)) (=> (= (x34 x4 x132) x98) (= (x34 x4 (x56 (x145 x159 x104) x132)) x98))) :named smtcomp218))
(assert (! (forall ((x132 x46) (x104 x10) (x146 x120)) (=> (= (x27 (x54 x170 x132) x104) x98) (= (x75 (x128 x132 x146) x146) x146))) :named smtcomp219))
(assert (! (forall ((x132 x60) (x104 x60)) (= (= x104 x132) (and (= x98 (x76 (x5 x118 x104) x132)) (= (x76 (x5 x118 x132) x104) x98)))) :named smtcomp220))
(assert (! (forall ((x132 x60) (x104 x168) (x146 x60)) (=> (forall ((x39 x120)) (=> (= x98 (x76 (x65 x119 x39) x132)) (= x98 (x76 (x65 x119 (x75 x104 x39)) x146)))) (= x98 (x76 (x5 x118 (x151 (x140 x163 x104) x132)) x146)))) :named smtcomp221))
(assert (! (forall ((x132 x1) (x104 x1) (x146 x1)) (=> (= (x58 (x110 x3 x132) x104) x98) (=> (= (= x132 x98) (= x98 x146)) (= (x58 (x110 x3 x146) x104) x98)))) :named smtcomp222))
(assert (! (forall ((x132 x60)) (= x132 (x151 (x20 x149 x132) x16))) :named smtcomp223))
(assert (! (forall ((x132 x60) (x104 x60) (x146 x120)) (=> (= (x76 (x5 x118 x132) x104) x98) (=> (=> (= (x58 (x110 x3 (x115 x132 x146)) (x115 x104 x146)) x98) false) false))) :named smtcomp224))
(assert (! (forall ((x132 x121) (x104 x121) (x146 x126)) (let ((x83 (x145 x159 x104)) (x125 (x145 x159 x132))) (= (x56 x125 (x56 x83 x146)) (x56 x83 (x56 x125 x146))))) :named smtcomp225))
(assert (! (forall ((x132 x60) (x104 x60) (x146 x95) (x39 x60)) (=> (= (x76 (x5 x118 x132) x104) x98) (=> (= (x151 x146 x132) x39) (=> (forall ((x79 x60) (x87 x60)) (=> (= x98 (x76 (x5 x118 x87) x79)) (= (x76 (x5 x118 (x151 x146 x87)) (x151 x146 x79)) x98))) (= x98 (x76 (x5 x118 x39) (x151 x146 x104))))))) :named smtcomp226))
(assert (! (forall ((x132 x1) (x104 x1)) (=> (= x98 (x58 (x110 x3 x132) x104)) (=> (= (x58 (x110 x3 x104) x132) x98) (= (= x98 x132) (= x104 x98))))) :named smtcomp227))
(assert (! (forall ((x132 x46) (x104 x120) (x146 x60) (x39 x120)) (=> (= (x115 (x151 (x94 (x82 x91 x132) x104) x146) x39) x98) (=> (not (= x98 (x76 (x65 x119 x104) x146))) (= (x115 (x151 (x153 x8 x132) (x151 (x94 x114 x104) x146)) x39) x98)))) :named smtcomp228))
(assert (! (forall ((x132 x120)) (= (= x98 (x115 x152 x132)) false)) :named smtcomp229))
(assert (! (forall ((x132 x102) (x104 x60) (x146 x1) (x39 x60)) (=> (= x98 (x58 (x110 x3 (x76 x132 x104)) x146)) (=> (= x98 (x76 (x5 x118 x39) x104)) (=> (forall ((x79 x60) (x87 x60)) (=> (= (x76 (x5 x118 x87) x79) x98) (= (x58 (x110 x3 (x76 x132 x87)) (x76 x132 x79)) x98))) (= x98 (x58 (x110 x3 (x76 x132 x39)) x146)))))) :named smtcomp230))
(assert (! (forall ((x132 x59) (x104 x121) (x146 x126) (x39 x121) (x79 x121)) (let ((x83 (x56 (x145 (x25 x17 x132) x104) x146))) (=> (= (x92 x19 x132) x98) (=> (= x98 (x21 x83 x39)) (=> (= (x21 x83 x79) x98) (= x39 x79)))))) :named smtcomp231))
(assert (! (forall ((x132 x126)) (= x98 (x34 (x51 x47 x166) x132))) :named smtcomp232))
(assert (! (forall ((x132 x126)) (= (= x166 x132) (forall ((x104 x121)) (not (= (x34 (x35 x33 x104) x132) x98))))) :named smtcomp233))
(assert (! (forall ((x132 x60) (x104 x60) (x146 x60) (x39 x60)) (=> (= (x76 (x5 x118 x132) x104) x98) (=> (= (x76 (x5 x118 x146) x39) x98) (= (x76 (x5 x118 (x151 (x20 x149 x132) x39)) (x151 (x20 x149 x104) x146)) x98)))) :named smtcomp234))
(assert (! (forall ((x132 x59) (x104 x121) (x146 x126) (x39 x121)) (=> (= x98 (x92 x19 x132)) (=> (= x98 (x21 (x56 (x145 (x25 x17 x132) x104) x146) x39)) (= x39 (x101 (x90 (x175 x38 x132) x104) x146))))) :named smtcomp235))
(assert (! (= x166 (x56 x6 x7)) :named smtcomp236))
(assert (! (forall ((x132 x60) (x104 x60) (x146 x60)) (let ((x83 (x5 x118 x146))) (=> (= x98 (x76 (x5 x118 x132) x104)) (=> (= x98 (x76 x83 x132)) (= (x76 x83 x104) x98))))) :named smtcomp237))
(assert (! (forall ((x132 x59) (x104 x126) (x146 x121)) (=> (= (x21 (x56 (x106 x57 x132) x104) x146) x98) (not (= x166 x104)))) :named smtcomp238))
(assert (! (= (x50 (x48 x173 x139) x160) x85) :named smtcomp239))
(assert (! (forall ((x132 x46) (x104 x60) (x146 x120) (x39 x120)) (let ((x83 (x63 (x156 x96 x132) x39))) (=> (= (x164 x143 x132) x98) (=> (= x98 (x76 x112 x104)) (=> (= (x76 (x65 x119 x146) x104) x98) (= (x75 (x128 x132 x146) (x123 x83 (x151 (x20 x149 x104) (x151 (x94 x114 x146) x16)))) (x123 x83 x104))))))) :named smtcomp240))
(assert (! (forall ((x132 x59) (x104 x121)) (=> (= (x21 (x56 (x106 x57 x132) x166) x104) x98) false)) :named smtcomp241))
(assert (! (forall ((x132 x121) (x104 x126) (x146 x93)) (let ((x83 (x50 (x48 x173 x146) x104))) (=> (= x98 (x34 (x35 x33 x132) x104)) (= (x151 (x94 x114 (x148 x146 x132)) x83) x83)))) :named smtcomp242))
(assert (! (forall ((x132 x59) (x104 x70) (x146 x126) (x39 x121)) (=> (= x98 (x122 (x131 x180 x132) x104)) (=> (= x98 (x34 x4 x146)) (=> (not (= x146 x166)) (= (x40 (x18 x132 x39) (x101 x104 x146)) (x101 x104 (x56 (x145 x159 x39) x146))))))) :named smtcomp243))
(assert (! (forall ((x132 x121) (x104 x121) (x146 x126)) (let ((x83 (x35 x33 x132))) (= (or (= (x34 x83 x146) x98) (= x132 x104)) (= (x34 x83 (x56 (x145 x159 x104) x146)) x98)))) :named smtcomp244))
(assert (! (forall ((x132 x126)) (= (= x98 (x34 (x51 x47 x132) x166)) (= x132 x166))) :named smtcomp245))
(assert (! (forall ((x132 x59) (x104 x126) (x146 x121)) (=> (= (x92 x19 x132) x98) (=> (= (x34 x4 x104) x98) (= (x21 (x56 (x145 (x25 x17 x132) x146) x104) (x101 (x90 (x175 x38 x132) x146) x104)) x98)))) :named smtcomp246))
(assert (! (forall ((x132 x124)) (= (x2 (x155 x64 x132) x16) x166)) :named smtcomp247))
(assert (! (forall ((x132 x126) (x104 x126) (x146 x147) (x39 x60)) (=> (= x98 (x34 (x51 x47 x132) x104)) (=> (= (x76 (x5 x118 (x50 x146 x104)) x39) x98) (=> (forall ((x79 x126) (x87 x126)) (=> (= (x34 (x51 x47 x79) x87) x98) (= (x76 (x5 x118 (x50 x146 x79)) (x50 x146 x87)) x98))) (= x98 (x76 (x5 x118 (x50 x146 x132)) x39)))))) :named smtcomp248))
(assert (! (forall ((x132 x84) (x104 x126)) (= (= x166 x104) (= (x56 (x86 x36 x132) x104) x166))) :named smtcomp249))
(assert (! (forall ((x132 x46) (x104 x10) (x146 x60) (x39 x60)) (let ((x83 (x123 x104 x146))) (=> (= x98 (x27 (x54 x170 x132) x104)) (=> (= x98 (x76 x112 x146)) (=> (not (= x16 x39)) (=> (= (x76 (x5 x118 x39) x146) x98) (= (x75 (x128 x132 (x123 x104 x39)) x83) x83))))))) :named smtcomp250))
(assert (! (forall ((x132 x126) (x104 x126)) (= (x34 (x51 x47 (x56 (x105 x77 x132) x104)) x132) x98)) :named smtcomp251))
(assert (! (forall ((x132 x60) (x104 x102)) (=> (= (x76 x112 x132) x98) (=> (= x98 (x76 x104 x16)) (=> (forall ((x146 x120) (x39 x60)) (=> (= (x76 x112 x39) x98) (=> (not (= (x76 (x65 x119 x146) x39) x98)) (=> (= (x76 x104 x39) x98) (= x98 (x76 x104 (x151 (x94 x114 x146) x39))))))) (= (x76 x104 x132) x98))))) :named smtcomp252))
(assert (! (forall ((x132 x59) (x104 x121)) (= (x101 (x90 (x175 x38 x132) x104) x166) x104)) :named smtcomp253))
(assert (! (forall ((x132 x60)) (= false (exists ((x104 x120)) (and (= x98 (x76 (x65 x119 x104) x16)) (= (x115 x132 x104) x98))))) :named smtcomp254))
(assert (! (forall ((x132 x46) (x104 x10) (x146 x60)) (=> (= (x27 (x54 x72 x132) x104) x98) (=> (= x98 (x76 x112 x146)) (=> (not (= x16 x146)) (=> (forall ((x39 x120) (x79 x120)) (= (x76 (x65 x119 (x75 (x128 x132 x39) x79)) (x151 (x94 x114 x39) (x151 (x94 x114 x79) x16))) x98)) (= (x76 (x65 x119 (x123 x104 x146)) x146) x98)))))) :named smtcomp255))
(assert (! (forall ((x132 x121)) (= (= x117 x98) (= x98 (x21 x166 x132)))) :named smtcomp256))
(assert (! (forall ((x132 x60) (x104 x60) (x146 x102) (x39 x1)) (=> (= (x76 (x5 x118 x132) x104) x98) (=> (= x98 (x58 (x110 x3 (x76 x146 x104)) x39)) (=> (forall ((x79 x60) (x87 x60)) (=> (= (x76 (x5 x118 x79) x87) x98) (= x98 (x58 (x110 x3 (x76 x146 x79)) (x76 x146 x87))))) (= (x58 (x110 x3 (x76 x146 x132)) x39) x98))))) :named smtcomp257))
(assert (! (forall ((x132 x60) (x104 x60) (x146 x168)) (=> (= x98 (x76 x112 x132)) (=> (= (x76 (x5 x118 x104) (x151 (x140 x163 x146) x132)) x98) (= (x76 x112 x104) x98)))) :named smtcomp258))
(assert (! (forall ((x132 x46) (x104 x10) (x146 x60) (x39 x120)) (=> (= x98 (x27 (x54 x72 x132) x104)) (=> (= x98 (x76 x112 x146)) (=> (not (= (x76 (x65 x119 x39) x146) x98)) (=> (not (= x146 x16)) (= (x75 (x128 x132 x39) (x123 x104 x146)) (x123 x104 (x151 (x94 x114 x39) x146)))))))) :named smtcomp259))
(assert (! (= (x61 x154 x3) x55) :named smtcomp260))
(assert (! (forall ((x132 x121) (x104 x126)) (not (= x166 (x56 (x145 x159 x132) x104)))) :named smtcomp261))
(assert (! (forall ((x132 x120) (x104 x60)) (let ((x83 (x94 x114 x132))) (= (x151 x83 (x151 (x20 x149 x104) (x151 x83 x16))) (x151 x83 x104)))) :named smtcomp262))
(assert (! (forall ((x132 x120) (x104 x60) (x146 x120)) (let ((x83 (x65 x119 x132))) (=> (= (x76 x83 x104) x98) (= (x76 x83 (x151 (x94 x114 x146) x104)) x98)))) :named smtcomp263))
(assert (! (forall ((x132 x121) (x104 x126) (x146 x121)) (let ((x83 (x35 x33 x132))) (=> (=> (not (= x98 (x34 x83 x104))) (= x146 x132)) (= (x34 x83 (x56 (x145 x159 x146) x104)) x98)))) :named smtcomp264))
(assert (! (forall ((x132 x46) (x104 x10) (x146 x60) (x39 x120)) (=> (= (x27 (x54 x170 x132) x104) x98) (=> (= (x76 x112 x146) x98) (= (x123 (x63 (x156 x96 x132) x39) x146) (x123 x104 (x151 (x94 x114 x39) x146)))))) :named smtcomp265))
(assert (! (forall ((x132 x60) (x104 x60) (x146 x120)) (let ((x83 (x65 x119 x146))) (=> (= (x76 (x5 x118 x132) x104) x98) (=> (= x98 (x76 x83 x132)) (= x98 (x76 x83 x104)))))) :named smtcomp266))
(assert (! (forall ((x132 x126) (x104 x121) (x146 x126)) (let ((x83 (x105 x77 x132)) (x125 (x145 x159 x104))) (= (x56 (x105 x77 (x56 x83 (x56 x125 x166))) x146) (x56 x83 (x56 x125 x146))))) :named smtcomp267))
(assert (! (forall ((x132 x60) (x104 x120)) (let ((x83 (x151 (x94 x114 x104) x16))) (=> (= x98 (x76 (x5 x118 x132) x83)) (or (= x16 x132) (= x83 x132))))) :named smtcomp268))
(assert (! (forall ((x132 x120) (x104 x120)) (= (= x98 (x76 (x65 x119 x132) (x151 (x94 x114 x104) x16))) (= x104 x132))) :named smtcomp269))
(assert (! (forall ((x132 x121) (x104 x126) (x146 x126)) (let ((x83 (x35 x33 x132))) (=> (= (x34 x83 (x56 (x105 x77 x104) x146)) x98) (=> (=> (= x98 (x34 x83 x104)) (=> (not (= x98 (x34 x83 x146))) false)) false)))) :named smtcomp270))
(assert (! (forall ((x132 x126) (x104 x126)) (=> (forall ((x146 x126)) (= (x34 (x51 x47 x132) x146) x98)) (= (x56 (x105 x179 x104) x132) x132))) :named smtcomp271))
(assert (! (forall ((x132 x126) (x104 x93)) (=> (= x98 (x34 x4 x132)) (= (x76 x112 (x50 (x48 x173 x104) x132)) x98))) :named smtcomp272))
(assert (! (forall ((x132 x60) (x104 x60)) (=> (forall ((x146 x60)) (= (x76 (x5 x118 x132) x146) x98)) (= (x151 (x20 x116 x132) x104) x132))) :named smtcomp273))
(assert (! (forall ((x132 x126)) (= (= x166 x132) (= x98 (x34 (x51 x47 x132) x166)))) :named smtcomp274))
(assert (! (forall ((x132 x162) (x104 x1) (x146 x60) (x39 x1)) (=> (= x98 (x76 (x5 x118 (x88 x132 x104)) x146)) (=> (= (x58 (x110 x3 x39) x104) x98) (=> (forall ((x79 x1) (x87 x1)) (=> (= x98 (x58 (x110 x3 x87) x79)) (= x98 (x76 (x5 x118 (x88 x132 x87)) (x88 x132 x79))))) (= x98 (x76 (x5 x118 (x88 x132 x39)) x146)))))) :named smtcomp275))
(assert (! (forall ((x132 x121) (x104 x126) (x146 x59) (x39 x121) (x79 x121)) (let ((x83 (x145 (x25 x17 x146) x39))) (=> (not (= x98 (x34 (x35 x33 x132) x104))) (=> (= (x21 (x56 x83 x104) x79) x98) (= x98 (x21 (x56 x83 (x56 (x145 x159 x132) x104)) (x40 (x18 x146 x132) x79))))))) :named smtcomp276))
(assert (! (forall ((x132 x1)) (= (x58 (x110 x3 x117) x132) x98)) :named smtcomp277))
(assert (! (forall ((x132 x59) (x104 x121) (x146 x121) (x39 x126) (x79 x121)) (=> (= x98 (x92 x19 x132)) (=> (= x98 (x21 (x56 (x145 (x25 x17 x132) x104) (x56 (x145 x159 x146) x39)) x79)) (=> (not (= (x34 (x35 x33 x146) x39) x98)) (=> (forall ((x87 x121)) (=> (= x79 (x40 (x18 x132 x146) x87)) (=> (= x98 (x21 (x56 (x145 (x25 x17 x132) x104) x39) x87)) false))) false))))) :named smtcomp278))
(assert (! (forall ((x132 x126) (x104 x126) (x146 x121)) (let ((x83 (x35 x33 x146))) (=> (= x98 (x34 (x51 x47 x132) x104)) (=> (= x98 (x34 x83 x132)) (= (x34 x83 x104) x98))))) :named smtcomp279))
(assert (! (forall ((x132 x126)) (=> (forall ((x104 x121)) (=> (= (x34 (x35 x33 x104) x132) x98) false)) (= x132 x166))) :named smtcomp280))
(assert (! (forall ((x132 x120) (x104 x60) (x146 x60)) (= (and (= x98 (x76 (x65 x119 x132) x146)) (= x98 (x76 (x5 x118 x104) x146))) (= x98 (x76 (x5 x118 (x151 (x94 x114 x132) x104)) x146)))) :named smtcomp281))
(assert (! (forall ((x132 x168) (x104 x120) (x146 x60)) (let ((x83 (x140 x163 x132))) (= (x151 x83 (x151 (x94 x114 x104) x146)) (x151 (x94 x114 (x75 x132 x104)) (x151 x83 x146))))) :named smtcomp282))
(assert (! (forall ((x132 x60)) (= (x76 (x5 x118 x16) x132) x98)) :named smtcomp283))
(assert (! (forall ((x132 x120) (x104 x60) (x146 x60)) (let ((x83 (x65 x119 x132))) (=> (= x98 (x76 x83 x104)) (=> (= x98 (x76 (x5 x118 x104) x146)) (= (x76 x83 x146) x98))))) :named smtcomp284))
(assert (! (forall ((x132 x60) (x104 x162) (x146 x1) (x39 x1)) (=> (= (x88 x104 x146) x132) (=> (= (x58 (x110 x3 x146) x39) x98) (=> (forall ((x79 x1) (x87 x1)) (=> (= (x58 (x110 x3 x79) x87) x98) (= x98 (x76 (x5 x118 (x88 x104 x79)) (x88 x104 x87))))) (= (x76 (x5 x118 x132) (x88 x104 x39)) x98))))) :named smtcomp285))
(assert (! (forall ((x132 x121)) (= (= x98 x117) (= (x21 x166 x132) x98))) :named smtcomp286))
(assert (! (forall ((x132 x126) (x104 x68) (x146 x60) (x39 x60)) (let ((x83 (x51 x47 x132))) (=> (= (x34 x83 (x2 x104 x146)) x98) (=> (= x98 (x76 (x5 x118 x146) x39)) (=> (forall ((x79 x60) (x87 x60)) (=> (= x98 (x76 (x5 x118 x79) x87)) (= x98 (x34 (x51 x47 (x2 x104 x79)) (x2 x104 x87))))) (= x98 (x34 x83 (x2 x104 x39)))))))) :named smtcomp287))
(assert (! (= (x42 x142 x47) x179) :named smtcomp288))
(assert (! (forall ((x132 x60) (x104 x60)) (= (= (x76 (x5 x118 x132) x104) x98) (forall ((x146 x120)) (= (x58 (x110 x3 (x115 x132 x146)) (x115 x104 x146)) x98)))) :named smtcomp289))
(assert (! (forall ((x132 x60) (x104 x46)) (=> (= x98 (x76 x112 x132)) (=> (not (= x16 x132)) (exists ((x146 x120)) (= x98 (x115 (x151 (x153 x8 x104) x132) x146)))))) :named smtcomp290))
(assert (! (forall ((x132 x126)) (= (or (= x132 x166) (exists ((x104 x126) (x146 x121)) (and (= (x56 (x145 x159 x146) x104) x132) (= x98 (x34 x4 x104))))) (= (x34 x4 x132) x98))) :named smtcomp291))
(assert (! (forall ((x132 x60) (x104 x147) (x146 x126) (x39 x126)) (let ((x83 (x5 x118 x132))) (=> (= x98 (x76 x83 (x50 x104 x146))) (=> (= (x34 (x51 x47 x146) x39) x98) (=> (forall ((x79 x126) (x87 x126)) (=> (= (x34 (x51 x47 x79) x87) x98) (= x98 (x76 (x5 x118 (x50 x104 x79)) (x50 x104 x87))))) (= x98 (x76 x83 (x50 x104 x39)))))))) :named smtcomp292))
(assert (! (forall ((x132 x60) (x104 x60)) (=> (= x132 x104) (= (x76 (x5 x118 x132) x104) x98))) :named smtcomp293))
(assert (! (forall ((x132 x126)) (= (not (= x132 x166)) (exists ((x104 x121) (x146 x126)) (and (not (= x98 (x34 (x35 x33 x104) x146))) (= (x56 (x145 x159 x104) x146) x132))))) :named smtcomp294))
(assert (! (forall ((x132 x1) (x104 x102) (x146 x60) (x39 x60)) (let ((x83 (x110 x3 x132))) (=> (= (x58 x83 (x76 x104 x146)) x98) (=> (= (x76 (x5 x118 x146) x39) x98) (=> (forall ((x79 x60) (x87 x60)) (=> (= (x76 (x5 x118 x79) x87) x98) (= x98 (x58 (x110 x3 (x76 x104 x79)) (x76 x104 x87))))) (= (x58 x83 (x76 x104 x39)) x98)))))) :named smtcomp295))
(assert (! (forall ((x132 x126) (x104 x126)) (=> (= (x34 (x51 x47 x132) x104) x98) (=> (= (x34 x4 x104) x98) (= x98 (x34 x4 x132))))) :named smtcomp296))
(assert (! (forall ((x132 x93) (x104 x121) (x146 x126)) (let ((x83 (x48 x173 x132))) (= (x50 x83 (x56 (x145 x159 x104) x146)) (x151 (x94 x114 (x148 x132 x104)) (x50 x83 x146))))) :named smtcomp297))
(assert (! (forall ((x132 x121) (x104 x84) (x146 x121) (x39 x126)) (=> (= (x40 x104 x146) x132) (=> (= x98 (x34 (x35 x33 x146) x39)) (= x98 (x34 (x35 x33 x132) (x56 (x86 x36 x104) x39)))))) :named smtcomp298))
(assert (! (forall ((x132 x46) (x104 x120) (x146 x60) (x39 x120)) (=> (= x98 (x115 (x151 (x153 x8 x132) (x151 (x94 x114 x104) x146)) x39)) (=> (forall ((x79 x120) (x87 x60)) (=> (= (x151 (x94 x114 x104) x146) (x151 (x94 x114 x79) x87)) (=> (= (x115 (x151 (x94 (x82 x91 x132) x79) x87) x39) x98) (=> (not (= (x76 (x65 x119 x79) x87) x98)) false)))) false))) :named smtcomp299))
(assert (! (forall ((x132 x60) (x104 x60)) (=> (= x104 x132) (= (x76 (x5 x118 x132) x104) x98))) :named smtcomp300))
(assert (! (forall ((x132 x60) (x104 x60)) (let ((x83 (x151 (x20 x149 x132) x104))) (= x83 (x151 (x20 x149 x83) x104)))) :named smtcomp301))
(assert (! (forall ((x132 x60) (x104 x60)) (=> (= x98 (x76 x112 x132)) (= x98 (x76 x112 (x151 (x20 x149 x132) x104))))) :named smtcomp302))
(assert (! (forall ((x132 x60) (x104 x102)) (=> (= (x76 x112 x132) x98) (=> (not (= x132 x16)) (=> (forall ((x146 x120)) (= x98 (x76 x104 (x151 (x94 x114 x146) x16)))) (=> (forall ((x146 x120) (x39 x60)) (=> (= x98 (x76 x112 x39)) (=> (not (= x16 x39)) (=> (not (= x98 (x76 (x65 x119 x146) x39))) (=> (= (x76 x104 x39) x98) (= x98 (x76 x104 (x151 (x94 x114 x146) x39)))))))) (= (x76 x104 x132) x98)))))) :named smtcomp303))
(assert (! (forall ((x132 x60)) (= (= x132 x16) (= (x76 (x5 x118 x132) x16) x98))) :named smtcomp304))
(assert (! (forall ((x132 x126) (x104 x60) (x146 x93)) (=> (= x98 (x34 x4 x132)) (=> (= (x76 (x5 x118 x104) (x50 (x48 x173 x146) x132)) x98) (= x98 (x76 x112 x104))))) :named smtcomp305))
(assert (! (forall ((x132 x120) (x104 x60) (x146 x121) (x39 x124)) (=> (= (x76 (x65 x119 x132) x104) x98) (=> (= x146 (x177 x39 x132)) (= (x34 (x35 x33 x146) (x2 (x155 x64 x39) x104)) x98)))) :named smtcomp306))
(assert (! (forall ((x132 x60) (x104 x60)) (=> (= (x76 (x5 x118 x132) x104) x98) (=> (= (x76 x112 x104) x98) (= x98 (x76 x112 x132))))) :named smtcomp307))
(assert (! (forall ((x132 x60) (x104 x60) (x146 x1) (x39 x102)) (let ((x83 (x110 x3 x146))) (=> (= (x76 (x5 x118 x132) x104) x98) (=> (= (x58 x83 (x76 x39 x132)) x98) (=> (forall ((x79 x60) (x87 x60)) (=> (= x98 (x76 (x5 x118 x87) x79)) (= x98 (x58 (x110 x3 (x76 x39 x87)) (x76 x39 x79))))) (= (x58 x83 (x76 x39 x104)) x98)))))) :named smtcomp308))
(assert (! (forall ((x132 x168) (x104 x60)) (= (= (x151 (x140 x163 x132) x104) x16) (= x16 x104))) :named smtcomp309))
(assert (! (forall ((x132 x126) (x104 x126) (x146 x126)) (let ((x83 (x51 x47 x146))) (=> (= x98 (x34 (x51 x47 x132) x104)) (=> (= (x34 x83 x132) x98) (= (x34 x83 x104) x98))))) :named smtcomp310))
(assert (! (forall ((x132 x126) (x104 x126) (x146 x84)) (let ((x83 (x86 x36 x146))) (=> (= (x34 (x51 x47 x132) x104) x98) (= (x34 (x51 x47 (x56 x83 x132)) (x56 x83 x104)) x98)))) :named smtcomp311))
(assert (! (forall ((x132 x126) (x104 x126) (x146 x93) (x39 x93)) (=> (= x104 x132) (=> (forall ((x79 x121)) (=> (= (x34 (x35 x33 x79) x104) x98) (= (x148 x146 x79) (x148 x39 x79)))) (= (x50 (x48 x173 x39) x104) (x50 (x48 x173 x146) x132))))) :named smtcomp312))
(assert (! (forall ((x132 x120) (x104 x60) (x146 x168)) (let ((x83 (x151 (x140 x163 x146) x104))) (=> (= (x76 (x65 x119 x132) x104) x98) (= (x151 (x94 x114 (x75 x146 x132)) x83) x83)))) :named smtcomp313))
(assert (! (forall ((x132 x121) (x104 x126) (x146 x121)) (let ((x83 (x35 x33 x132))) (=> (= (x34 x83 x104) x98) (= (x34 x83 (x56 (x145 x159 x146) x104)) x98)))) :named smtcomp314))
(assert (! (forall ((x132 x120) (x104 x60)) (=> (= (x76 (x65 x119 x132) x104) x98) (= x104 (x151 (x94 x114 x132) x104)))) :named smtcomp315))
(assert (! (forall ((x132 x121) (x104 x126)) (not (= (x56 (x145 x159 x132) x104) x166))) :named smtcomp316))
(assert (! (forall ((x132 x121) (x104 x126) (x146 x126)) (=> (= x98 (x34 (x35 x33 x132) x104)) (= (x56 (x105 x77 x146) x104) (x56 (x105 x77 (x56 (x145 x159 x132) x146)) x104)))) :named smtcomp317))
(assert (! (forall ((x132 x60) (x104 x60) (x146 x120)) (= (= x98 (x58 (x110 x150 (x115 x132 x146)) (x115 x104 x146))) (= (x115 (x151 (x20 x149 x132) x104) x146) x98))) :named smtcomp318))
(assert (! (forall ((x132 x59) (x104 x121) (x146 x126) (x39 x121)) (= (= (x21 (x56 (x145 (x25 x17 x132) x104) x146) x39) x98) (or (and (= x146 x166) (= x104 x39)) (exists ((x79 x121) (x87 x126) (x103 x121)) (and (= x146 (x56 (x145 x159 x79) x87)) (and (= (x40 (x18 x132 x79) x103) x39) (and (not (= x98 (x34 (x35 x33 x79) x87))) (= (x21 (x56 (x145 (x25 x17 x132) x104) x87) x103) x98)))))))) :named smtcomp319))
(assert (! (forall ((x132 x120) (x104 x60) (x146 x60)) (let ((x83 (x5 x118 x104))) (=> (not (= x98 (x76 (x65 x119 x132) x104))) (= (= (x76 x83 x146) x98) (= (x76 x83 (x151 (x94 x114 x132) x146)) x98))))) :named smtcomp320))
(assert (! (= (x34 x4 x160) x98) :named smtcomp321))
(assert (! (forall ((x132 x120) (x104 x60)) (not (= (x151 (x94 x114 x132) x104) x16))) :named smtcomp322))
(assert (! (forall ((x132 x60) (x104 x60)) (=> (forall ((x146 x60)) (= (x76 (x5 x118 x132) x146) x98)) (= (x151 (x20 x32 x104) x132) x104))) :named smtcomp323))
(assert (! (forall ((x132 x126) (x104 x126) (x146 x121)) (=> (= (x34 (x51 x47 x132) x104) x98) (= x98 (x58 (x110 x3 (x21 x132 x146)) (x21 x104 x146))))) :named smtcomp324))
(assert (! (forall ((x132 x60) (x104 x60) (x146 x120)) (let ((x83 (x65 x119 x146))) (=> (= (x76 (x5 x118 x132) x104) x98) (=> (= x98 (x76 x83 x132)) (= (x76 x83 x104) x98))))) :named smtcomp325))
(assert (! (forall ((x132 x126)) (= false (exists ((x104 x121)) (and (= (x34 (x35 x33 x104) x166) x98) (= x98 (x21 x132 x104)))))) :named smtcomp326))
(assert (! (forall ((x132 x126)) (= x166 (x56 (x105 x77 x132) x132))) :named smtcomp327))
(assert (! (forall ((x132 x60) (x104 x124)) (=> (= (x76 x112 x132) x98) (= (x34 x4 (x2 (x155 x64 x104) x132)) x98))) :named smtcomp328))
(assert (! (forall ((x132 x126) (x104 x126) (x146 x172)) (=> (= (x34 x4 x132) x98) (=> (= (x34 (x51 x47 x132) x104) x98) (=> (= (x34 x146 x166) x98) (=> (forall ((x39 x121) (x79 x126)) (let ((x83 (x35 x33 x39))) (=> (= (x34 x4 x79) x98) (=> (= (x34 x83 x104) x98) (=> (not (= x98 (x34 x83 x79))) (=> (= x98 (x34 x146 x79)) (= (x34 x146 (x56 (x145 x159 x39) x79)) x98))))))) (= (x34 x146 x132) x98)))))) :named smtcomp329))
(assert (! (forall ((x132 x126) (x104 x126)) (=> (forall ((x146 x121)) (let ((x83 (x35 x33 x146))) (=> (= x98 (x34 x83 x132)) (= x98 (x34 x83 x104))))) (= x98 (x34 (x51 x47 x132) x104)))) :named smtcomp330))
(assert (! (forall ((x132 x126) (x104 x126) (x146 x84)) (=> (= x98 (x34 x4 x132)) (=> (= (x34 (x51 x47 x104) (x56 (x86 x36 x146) x132)) x98) (= (x34 x4 x104) x98)))) :named smtcomp331))
(assert (! (forall ((x132 x60) (x104 x60) (x146 x60)) (let ((x83 (x5 x118 x132))) (=> (= x98 (x76 x83 x104)) (=> (= (x76 (x5 x118 x104) x146) x98) (= (x76 x83 x146) x98))))) :named smtcomp332))
(assert (! (= (x76 x112 x16) x98) :named smtcomp333))
(assert (! (forall ((x132 x126) (x104 x126) (x146 x126)) (let ((x83 (x51 x47 x132))) (=> (= x98 (x34 x83 x104)) (=> (= x98 (x34 (x51 x47 x104) x146)) (= x98 (x34 x83 x146)))))) :named smtcomp334))
(assert (! (forall ((x132 x121)) (=> (= x98 (x34 (x35 x33 x132) x166)) false)) :named smtcomp335))
(assert (! (forall ((x132 x168) (x104 x60) (x146 x60)) (let ((x83 (x140 x163 x132))) (= (x76 (x5 x118 (x151 (x20 x149 (x151 x83 x104)) (x151 x83 x146))) (x151 x83 (x151 (x20 x149 x104) x146))) x98))) :named smtcomp336))
(assert (! (forall ((x132 x46) (x104 x120) (x146 x60) (x39 x120) (x79 x120)) (let ((x83 (x151 (x94 (x82 x91 x132) x104) x146))) (=> (= x98 (x164 x143 x132)) (=> (= (x115 x83 x39) x98) (=> (= x98 (x115 x83 x79)) (= x39 x79)))))) :named smtcomp337))
(assert (! (forall ((x132 x1) (x104 x1)) (=> (= (= x98 x132) (= x104 x98)) (= (x58 (x110 x3 x132) x104) x98))) :named smtcomp338))
(assert (! (forall ((x132 x126)) (= (x56 (x105 x77 x132) x166) x132)) :named smtcomp339))
(assert (! (forall ((x132 x59) (x104 x126) (x146 x121)) (= (exists ((x39 x121) (x79 x126) (x87 x121)) (and (= (x56 (x145 x159 x39) x79) x104) (and (= x87 x146) (and (= x98 (x21 (x56 (x145 (x25 x17 x132) x39) x79) x87)) (not (= (x34 (x35 x33 x39) x79) x98)))))) (= (x21 (x56 (x106 x57 x132) x104) x146) x98))) :named smtcomp340))
(assert (! (forall ((x132 x120) (x104 x60) (x146 x124)) (let ((x83 (x2 (x155 x64 x146) x104))) (=> (= x98 (x76 (x65 x119 x132) x104)) (= (x56 (x145 x159 (x177 x146 x132)) x83) x83)))) :named smtcomp341))
(assert (! (forall ((x132 x60) (x104 x60) (x146 x60)) (=> (= x104 x132) (=> (= (x76 (x5 x118 x104) x146) x98) (= x98 (x76 (x5 x118 x132) x146))))) :named smtcomp342))
(assert (! (forall ((x132 x126) (x104 x126) (x146 x121)) (let ((x83 (x35 x33 x146))) (= (= (x21 (x56 (x105 x26 x132) x104) x146) x98) (and (= (x34 x83 x132) x98) (not (= x98 (x34 x83 x104))))))) :named smtcomp343))
(assert (! (forall ((x132 x60) (x104 x60)) (=> (= (x76 (x5 x118 x132) x104) x98) (= (x76 (x5 x144 x104) x132) x98))) :named smtcomp344))
(assert (! (forall ((x132 x120)) (= (x123 x107 (x151 (x94 x114 x132) x16)) x132)) :named smtcomp345))
(assert (! (forall ((x132 x121) (x104 x126)) (let ((x83 (x145 x159 x132))) (let ((x125 (x56 x83 x104))) (= x125 (x56 x83 x125))))) :named smtcomp346))
(assert (! (forall ((x132 x124) (x104 x120) (x146 x60)) (let ((x83 (x155 x64 x132))) (= (x56 (x145 x159 (x177 x132 x104)) (x2 x83 x146)) (x2 x83 (x151 (x94 x114 x104) x146))))) :named smtcomp347))
(assert (! (forall ((x132 x59) (x104 x126) (x146 x121) (x39 x121)) (let ((x83 (x90 (x175 x38 x132) x146)) (x125 (x145 x159 x39))) (=> (= x98 (x92 x19 x132)) (=> (= (x34 x4 x104) x98) (= (x40 (x18 x132 x39) (x101 x83 (x56 (x105 x77 x104) (x56 x125 x166)))) (x101 x83 (x56 x125 x104))))))) :named smtcomp348))
(assert (! (forall ((x132 x120) (x104 x60) (x146 x46) (x39 x120) (x79 x120)) (let ((x83 (x94 (x82 x91 x146) x39))) (=> (not (= x98 (x76 (x65 x119 x132) x104))) (=> (= (x115 (x151 x83 x104) x79) x98) (= (x115 (x151 x83 (x151 (x94 x114 x132) x104)) (x75 (x128 x146 x132) x79)) x98))))) :named smtcomp349))
(assert (! (forall ((x132 x46) (x104 x60) (x146 x120) (x39 x120)) (let ((x83 (x156 x96 x132)) (x125 (x128 x132 x146))) (=> (= (x164 x143 x132) x98) (=> (= (x76 x112 x104) x98) (= (x75 x125 (x123 (x63 x83 x39) x104)) (x123 (x63 x83 (x75 x125 x39)) x104)))))) :named smtcomp350))
(assert (! (forall ((x132 x121) (x104 x126) (x146 x84)) (=> (= x98 (x34 (x35 x33 x132) x104)) (= (x34 (x35 x33 (x40 x146 x132)) (x56 (x86 x36 x146) x104)) x98))) :named smtcomp351))
(assert (! (forall ((x132 x121)) (= x132 (x101 x97 (x56 (x145 x159 x132) x166)))) :named smtcomp352))
(assert (! (forall ((x132 x120) (x104 x93) (x146 x126)) (= (exists ((x39 x121)) (and (= x98 (x34 (x35 x33 x39) x146)) (= x132 (x148 x104 x39)))) (= (x76 (x65 x119 x132) (x50 (x48 x173 x104) x146)) x98))) :named smtcomp353))
(assert (! (forall ((x132 x120)) (= (= x98 x117) (= (x115 x16 x132) x98))) :named smtcomp354))
(assert (! (forall ((x132 x147) (x104 x126) (x146 x60) (x39 x126)) (=> (= (x76 (x5 x118 (x50 x132 x104)) x146) x98) (=> (= (x34 (x51 x47 x39) x104) x98) (=> (forall ((x79 x126) (x87 x126)) (=> (= x98 (x34 (x51 x47 x87) x79)) (= x98 (x76 (x5 x118 (x50 x132 x87)) (x50 x132 x79))))) (= x98 (x76 (x5 x118 (x50 x132 x39)) x146)))))) :named smtcomp355))
(assert (! (forall ((x132 x126) (x104 x126)) (= (= (x34 (x51 x47 x132) x104) x98) (forall ((x146 x121)) (= (x58 (x110 x3 (x21 x132 x146)) (x21 x104 x146)) x98)))) :named smtcomp356))
(assert (! (forall ((x132 x59) (x104 x70) (x146 x121)) (=> (= (x122 (x131 x74 x132) x104) x98) (= x146 (x101 x104 (x56 (x145 x159 x146) x166))))) :named smtcomp357))
(assert (! (forall ((x132 x121) (x104 x126)) (= (x56 x6 (x56 (x145 x108 x132) x104)) (x56 (x145 x159 x132) (x56 x6 x104)))) :named smtcomp358))
(assert (! (forall ((x132 x46) (x104 x60) (x146 x120)) (= (exists ((x39 x120) (x79 x60) (x87 x120)) (and (and (= x87 x146) (and (= x98 (x115 (x151 (x94 (x82 x91 x132) x39) x79) x87)) (not (= (x76 (x65 x119 x39) x79) x98)))) (= (x151 (x94 x114 x39) x79) x104))) (= (x115 (x151 (x153 x8 x132) x104) x146) x98))) :named smtcomp359))
(assert (! (forall ((x132 x60) (x104 x60) (x146 x120)) (= (= (x115 (x151 (x20 x149 x132) x104) x146) x98) (= x98 (x58 (x110 x150 (x115 x132 x146)) (x115 x104 x146))))) :named smtcomp360))
(assert (! (forall ((x132 x60) (x104 x120)) (=> (= (x76 x112 x132) x98) (= x98 (x76 x112 (x151 (x94 x114 x104) x132))))) :named smtcomp361))
(assert (! (forall ((x132 x46) (x104 x120) (x146 x120)) (= (= (x115 (x151 (x153 x8 x132) (x151 (x94 x114 x104) x16)) x146) x98) (= x104 x146))) :named smtcomp362))
(assert (! (forall ((x132 x46) (x104 x60) (x146 x120) (x39 x120)) (let ((x125 (x94 x114 x39)) (x83 (x63 (x156 x96 x132) x146))) (=> (= (x164 x143 x132) x98) (=> (= (x76 x112 x104) x98) (= (x75 (x128 x132 x39) (x123 x83 (x151 (x20 x149 x104) (x151 x125 x16)))) (x123 x83 (x151 x125 x104))))))) :named smtcomp363))
(assert (! (forall ((x132 x126) (x104 x126)) (=> (forall ((x146 x126)) (= (x34 (x51 x47 x132) x146) x98)) (= x132 (x56 (x105 x179 x132) x104)))) :named smtcomp364))
(assert (! (forall ((x132 x1) (x104 x1)) (= (and (= (x58 (x110 x3 x104) x132) x98) (= x98 (x58 (x110 x3 x132) x104))) (= (= x104 x98) (= x132 x98)))) :named smtcomp365))
(assert (! (forall ((x132 x126) (x104 x84) (x146 x126)) (=> (= x98 (x34 x4 x132)) (=> (= (x34 (x51 x47 x132) (x56 (x86 x36 x104) x146)) x98) (exists ((x39 x126)) (and (and (= (x56 (x86 x36 x104) x39) x132) (= (x34 x4 x39) x98)) (= x98 (x34 (x51 x47 x39) x146))))))) :named smtcomp366))
(assert (! (forall ((x132 x121)) (=> (= x98 (x34 (x35 x33 x132) x160)) (= (x176 x171 (x23 x181 (x78 x132))) x98))) :named smtcomp367))
(assert (! (forall ((x132 x46) (x104 x60) (x146 x120) (x39 x120)) (let ((x83 (x156 x96 x132))) (=> (= x98 (x164 x143 x132)) (=> (= x98 (x76 x112 x104)) (=> (not (= x98 (x76 (x65 x119 x146) x104))) (= (x123 (x63 x83 x39) (x151 (x94 x114 x146) x104)) (x123 (x63 x83 (x75 (x128 x132 x146) x39)) x104))))))) :named smtcomp368))
(assert (! (forall ((x132 x126) (x104 x121) (x146 x126)) (let ((x83 (x145 x159 x104)) (x125 (x51 x47 x132))) (= (ite (= (x34 (x35 x33 x104) x132) x98) (= x98 (x34 (x51 x47 (x56 (x105 x77 x132) (x56 x83 x166))) x146)) (= (x34 x125 x146) x98)) (= (x34 x125 (x56 x83 x146)) x98)))) :named smtcomp369))
(assert (! (forall ((x132 x46) (x104 x10) (x146 x60) (x39 x120)) (=> (= (x27 (x54 x72 x132) x104) x98) (=> (= (x76 x112 x146) x98) (=> (not (= x98 (x76 (x65 x119 x39) x146))) (= (x123 x104 (x151 (x94 x114 x39) x146)) (x123 (x63 (x156 x96 x132) x39) x146)))))) :named smtcomp370))
(assert (! (forall ((x132 x59) (x104 x121) (x146 x126) (x39 x121)) (=> (= x98 (x21 (x56 (x145 (x25 x17 x132) x104) x146) x39)) (=> (not (= x98 (x34 (x35 x33 x104) x146))) (= (x21 (x56 (x106 x57 x132) (x56 (x145 x159 x104) x146)) x39) x98)))) :named smtcomp371))
(assert (! (forall ((x132 x121) (x104 x126) (x146 x126)) (let ((x83 (x35 x33 x132)) (x125 (x145 x159 x132))) (=> (not (= x98 (x34 x83 x104))) (=> (not (= x98 (x34 x83 x146))) (= (= (x56 x125 x104) (x56 x125 x146)) (= x104 x146)))))) :named smtcomp372))
(assert (! (forall ((x132 x126) (x104 x126) (x146 x121)) (= (= (x58 (x110 x150 (x21 x132 x146)) (x21 x104 x146)) x98) (= (x21 (x56 (x105 x77 x132) x104) x146) x98))) :named smtcomp373))
(assert (! (forall ((x132 x126) (x104 x172)) (=> (= (x34 x4 x132) x98) (=> (not (= x132 x166)) (=> (forall ((x146 x121)) (= (x34 x104 (x56 (x145 x159 x146) x166)) x98)) (=> (forall ((x146 x121) (x39 x126)) (=> (= x98 (x34 x4 x39)) (=> (not (= x39 x166)) (=> (not (= x98 (x34 (x35 x33 x146) x39))) (=> (= (x34 x104 x39) x98) (= (x34 x104 (x56 (x145 x159 x146) x39)) x98)))))) (= (x34 x104 x132) x98)))))) :named smtcomp374))
(assert (! (forall ((x132 x60) (x104 x120) (x146 x60)) (let ((x83 (x20 x149 x132))) (= (= (x76 x112 (x151 x83 x146)) x98) (= (x76 x112 (x151 x83 (x151 (x94 x114 x104) x146))) x98)))) :named smtcomp375))
(assert (! (forall ((x132 x121) (x104 x121) (x146 x121) (x39 x121)) (= (= (x56 (x145 x159 x146) (x56 (x145 x159 x39) x166)) (x56 (x145 x159 x132) (x56 (x145 x159 x104) x166))) (or (and (= x104 x39) (= x132 x146)) (and (= x104 x146) (= x39 x132))))) :named smtcomp376))
(assert (! (forall ((x132 x126) (x104 x126) (x146 x126)) (=> (= x98 (x34 (x51 x47 x132) x104)) (=> (= x132 x146) (= x98 (x34 (x51 x47 x146) x104))))) :named smtcomp377))
(assert (! (forall ((x132 x46) (x104 x10) (x146 x60) (x39 x120)) (=> (= x98 (x27 (x54 x170 x132) x104)) (=> (= (x76 x112 x146) x98) (=> (not (= x16 x146)) (= (x75 (x128 x132 x39) (x123 x104 x146)) (x123 x104 (x151 (x94 x114 x39) x146))))))) :named smtcomp378))
(assert (! (forall ((x132 x60) (x104 x60)) (=> (= (x76 (x5 x118 x132) x104) x98) (=> (= (x76 (x5 x118 x104) x132) x98) (= x132 x104)))) :named smtcomp379))
(assert (! (forall ((x132 x59) (x104 x126) (x146 x121) (x39 x121)) (let ((x83 (x90 (x175 x38 x132) x39))) (=> (= x98 (x92 x19 x132)) (=> (= x98 (x34 x4 x104)) (=> (= x98 (x34 (x35 x33 x146) x104)) (= (x101 x83 x104) (x40 (x18 x132 x146) (x101 x83 (x56 (x105 x77 x104) (x56 (x145 x159 x146) x166)))))))))) :named smtcomp380))
(assert (! (forall ((x132 x126) (x104 x127) (x146 x126) (x39 x126)) (=> (= x132 (x56 x104 x146)) (=> (= x98 (x34 (x51 x47 x39) x146)) (=> (forall ((x79 x126) (x87 x126)) (=> (= x98 (x34 (x51 x47 x87) x79)) (= x98 (x34 (x51 x47 (x56 x104 x87)) (x56 x104 x79))))) (= (x34 (x51 x47 (x56 x104 x39)) x132) x98))))) :named smtcomp381))
(assert (! (forall ((x132 x60) (x104 x60) (x146 x68) (x39 x126)) (=> (= (x76 (x5 x118 x132) x104) x98) (=> (= x98 (x34 (x51 x47 (x2 x146 x104)) x39)) (=> (forall ((x79 x60) (x87 x60)) (=> (= (x76 (x5 x118 x79) x87) x98) (= (x34 (x51 x47 (x2 x146 x79)) (x2 x146 x87)) x98))) (= x98 (x34 (x51 x47 (x2 x146 x132)) x39)))))) :named smtcomp382))
(assert (! (forall ((x132 x60)) (= (= x132 x16) (forall ((x104 x120)) (not (= (x76 (x65 x119 x104) x132) x98))))) :named smtcomp383))
(assert (! (forall ((x132 x1) (x104 x1)) (=> (forall ((x146 x1)) (= x98 (x58 (x110 x3 x132) x146))) (= (= x98 (x58 (x110 x43 x132) x104)) (= x98 x104)))) :named smtcomp384))
(assert (! (forall ((x132 x120) (x104 x60) (x146 x168)) (=> (= (x76 (x65 x119 x132) x104) x98) (= x98 (x76 (x65 x119 (x75 x146 x132)) (x151 (x140 x163 x146) x104))))) :named smtcomp385))
(assert (! (forall ((x132 x121) (x104 x126) (x146 x126)) (let ((x83 (x35 x33 x132))) (=> (= (x34 x83 x104) x98) (=> (= x98 (x34 (x51 x47 x104) x146)) (= x98 (x34 x83 x146)))))) :named smtcomp386))
(assert (! (forall ((x132 x126) (x104 x126) (x146 x127) (x39 x126)) (=> (= (x34 (x51 x47 x132) x104) x98) (=> (= x39 (x56 x146 x132)) (=> (forall ((x79 x126) (x87 x126)) (=> (= (x34 (x51 x47 x87) x79) x98) (= (x34 (x51 x47 (x56 x146 x87)) (x56 x146 x79)) x98))) (= x98 (x34 (x51 x47 x39) (x56 x146 x104))))))) :named smtcomp387))
(assert (! (forall ((x132 x60)) (= (not (= x132 x16)) (exists ((x104 x120)) (= x98 (x76 (x65 x119 x104) x132))))) :named smtcomp388))
(assert (! (forall ((x132 x126) (x104 x121) (x146 x126)) (let ((x83 (x145 x159 x104))) (=> (= (x34 (x51 x47 (x56 (x105 x77 x132) (x56 x83 x166))) x146) x98) (=> (= (x34 (x35 x33 x104) x132) x98) (= x98 (x34 (x51 x47 x132) (x56 x83 x146))))))) :named smtcomp389))
(assert (! (forall ((x132 x126) (x104 x121) (x146 x126)) (let ((x83 (x105 x77 x132))) (= (= x98 (x34 x4 (x56 x83 (x56 (x145 x159 x104) x146)))) (= x98 (x34 x4 (x56 x83 x146)))))) :named smtcomp390))
(assert (! (forall ((x132 x1) (x104 x1)) (=> (forall ((x146 x1)) (= (x58 (x110 x3 x132) x146) x98)) (= (= x132 x98) (= (x58 (x110 x55 x132) x104) x98)))) :named smtcomp391))
(assert (! (forall ((x132 x46) (x104 x10) (x146 x120)) (=> (= x98 (x27 (x54 x72 x132) x104)) (= (x123 x104 (x151 (x94 x114 x146) x16)) x146))) :named smtcomp392))
(assert (! (not (= x98 x73)) :named smtcomp393))
(assert (! (forall ((x132 x120) (x104 x60) (x146 x60)) (let ((x83 (x65 x119 x132))) (=> (= (x76 x83 x104) x98) (=> (not (= x98 (x76 x83 x146))) (= x98 (x76 x83 (x151 (x20 x149 x104) x146))))))) :named smtcomp394))
(assert (! (forall ((x132 x60)) (= x16 (x151 (x20 x149 x16) x132))) :named smtcomp395))
(assert (! (forall ((x132 x1) (x104 x1)) (=> (= x98 (x58 (x110 x3 x132) x104)) (= (= (= x132 x98) (= x98 x104)) (= (x58 (x110 x3 x104) x132) x98)))) :named smtcomp396))
(assert (! (forall ((x132 x60) (x104 x120) (x146 x60)) (let ((x125 (x94 x114 x104)) (x83 (x20 x149 x132))) (= (x151 x83 (x151 x125 x146)) (x151 (x20 x149 (x151 x83 x146)) (x151 x125 x16))))) :named smtcomp397))
(assert (! (forall ((x132 x60) (x104 x46) (x146 x120)) (=> (= (x76 x112 x132) x98) (exists ((x39 x120)) (= x98 (x115 (x151 (x94 (x82 x91 x104) x146) x132) x39))))) :named smtcomp398))
(assert (! (forall ((x132 x126) (x104 x126)) (=> (= x104 x132) (= x98 (x34 (x51 x47 x104) x132)))) :named smtcomp399))
(assert (! (forall ((x132 x84) (x104 x121) (x146 x126)) (let ((x83 (x86 x36 x132))) (= (x56 x83 (x56 (x145 x159 x104) x146)) (x56 (x145 x159 (x40 x132 x104)) (x56 x83 x146))))) :named smtcomp400))
(assert (! (forall ((x132 x157) (x104 x60)) (=> (= x98 (x176 x171 x132)) (=> (forall ((x146 x121)) (=> (= (x34 (x35 x33 x146) x160) x98) (= x98 (x76 (x5 x144 x104) (x151 (x94 x114 (x148 x139 x146)) x16))))) (= x98 (x76 (x5 x144 x104) (x151 (x94 x114 (x37 x130 x132)) x16)))))) :named smtcomp401))
(assert (! (forall ((x132 x121) (x104 x126) (x146 x121)) (= (or (= x98 (x34 (x35 x33 x146) x104)) (= x132 x146)) (= (x21 (x56 (x145 x138 x132) x104) x146) x98))) :named smtcomp402))
(assert (! (forall ((x132 x126) (x104 x121)) (= (x34 (x51 x47 x132) (x56 (x145 x159 x104) x132)) x98)) :named smtcomp403))
(assert (! (forall ((x132 x126)) (= (forall ((x104 x121)) (not (= x98 (x21 x132 x104)))) (= (x56 x6 x132) x166))) :named smtcomp404))
(assert (! (forall ((x132 x126) (x104 x126) (x146 x126) (x39 x126)) (=> (= x98 (x34 (x51 x47 x132) x104)) (=> (= x98 (x34 (x51 x47 x146) x39)) (= (x34 (x51 x47 (x56 (x105 x77 x132) x39)) (x56 (x105 x77 x104) x146)) x98)))) :named smtcomp405))
(assert (! (forall ((x132 x126) (x104 x59)) (=> (= (x34 x4 x132) x98) (=> (not (= x166 x132)) (exists ((x146 x121)) (= (x21 (x56 (x106 x57 x104) x132) x146) x98))))) :named smtcomp406))
(assert (! (forall ((x132 x120) (x104 x60) (x146 x120)) (= (or (= x132 x146) (= (x115 x104 x146) x98)) (= (x115 (x151 (x94 x114 x132) x104) x146) x98))) :named smtcomp407))
(assert (! (forall ((x132 x121) (x104 x126)) (=> (= (x34 (x35 x33 x132) x104) x98) (exists ((x146 x126)) (and (= x104 (x56 (x145 x159 x132) x146)) (not (= (x34 (x35 x33 x132) x146) x98)))))) :named smtcomp408))
(assert (! (forall ((x132 x120) (x104 x120) (x146 x120) (x39 x120)) (= (= (x151 (x94 x114 x146) (x151 (x94 x114 x39) x16)) (x151 (x94 x114 x132) (x151 (x94 x114 x104) x16))) (or (and (= x146 x132) (= x39 x104)) (and (= x39 x132) (= x104 x146))))) :named smtcomp409))
(assert (! (forall ((x132 x120)) (=> (= (x76 (x65 x119 x132) x16) x98) false)) :named smtcomp410))
(assert (! (forall ((x132 x1) (x104 x1) (x146 x1)) (let ((x83 (x110 x3 x146))) (=> (= x98 (x58 (x110 x3 x132) x104)) (=> (= (x58 x83 x132) x98) (= x98 (x58 x83 x104)))))) :named smtcomp411))
(assert (! (forall ((x132 x126) (x104 x126)) (=> (= x98 (x34 x4 x132)) (=> (= x98 (x34 (x51 x47 x104) x132)) (= (x34 x4 x104) x98)))) :named smtcomp412))
(assert (! (forall ((x132 x59) (x104 x70) (x146 x126) (x39 x121)) (let ((x83 (x145 x159 x39))) (let ((x125 (x56 (x105 x77 x146) (x56 x83 x166)))) (=> (= x98 (x122 (x131 x74 x132) x104)) (=> (= x98 (x34 x4 x146)) (= (x101 x104 (x56 x83 x146)) (ite (= x125 x166) x39 (x40 (x18 x132 x39) (x101 x104 x125))))))))) :named smtcomp413))
(assert (! (forall ((x132 x126) (x104 x84) (x146 x126)) (=> (forall ((x39 x121)) (=> (= x98 (x34 (x35 x33 x39) x132)) (= (x34 (x35 x33 (x40 x104 x39)) x146) x98))) (= x98 (x34 (x51 x47 (x56 (x86 x36 x104) x132)) x146)))) :named smtcomp414))
(assert (! (forall ((x132 x121) (x104 x126) (x146 x84)) (let ((x83 (x56 (x86 x36 x146) x104))) (=> (= (x34 (x35 x33 x132) x104) x98) (= x83 (x56 (x145 x159 (x40 x146 x132)) x83))))) :named smtcomp415))
(assert (! (forall ((x132 x126)) (= (x56 x6 x132) x132)) :named smtcomp416))
(assert (! (forall ((x132 x60) (x104 x93) (x146 x126)) (= (exists ((x39 x126)) (and (= (x50 (x48 x173 x104) x39) x132) (= x98 (x34 (x51 x47 x39) x146)))) (= x98 (x76 (x5 x118 x132) (x50 (x48 x173 x104) x146))))) :named smtcomp417))
(assert (! (forall ((x132 x126) (x104 x59) (x146 x121)) (=> (= x98 (x34 x4 x132)) (exists ((x39 x121)) (= x98 (x21 (x56 (x145 (x25 x17 x104) x146) x132) x39))))) :named smtcomp418))
(assert (! (forall ((x132 x121) (x104 x126)) (= (= x98 (x34 (x35 x33 x132) x104)) (= (x21 x104 x132) x98))) :named smtcomp419))
(assert (! (forall ((x132 x46) (x104 x10) (x146 x168) (x39 x60)) (=> (= x98 (x27 (x54 x170 x132) x104)) (=> (forall ((x79 x120) (x87 x120)) (= (x75 (x128 x132 (x75 x146 x79)) (x75 x146 x87)) (x75 x146 (x75 (x128 x132 x79) x87)))) (=> (= (x76 x112 x39) x98) (=> (not (= x16 x39)) (= (x123 x104 (x151 (x140 x163 x146) x39)) (x75 x146 (x123 x104 x39)))))))) :named smtcomp420))
(assert (! (not (forall ((x132 x121)) (=> (= x98 (x34 (x35 x33 x132) x160)) (= (x76 (x5 x144 (x50 (x48 x173 x139) x160)) (x151 (x94 x114 (x148 x139 x132)) x16)) x98)))) :named smtcomp421))
(assert (! (forall ((x132 x120) (x104 x60) (x146 x120)) (= (or (= x98 (x76 (x65 x119 x146) x104)) (= x132 x146)) (= (x115 (x151 (x94 x52 x132) x104) x146) x98))) :named smtcomp422))
(assert (! (forall ((x132 x126) (x104 x126)) (=> (forall ((x146 x126)) (= (x34 (x51 x47 x132) x146) x98)) (= (x56 (x105 x62 x104) x132) x104))) :named smtcomp423))
(assert (! (forall ((x132 x1) (x104 x24) (x146 x1) (x39 x1)) (=> (= (= x98 x132) (= (x58 x104 x146) x98)) (=> (= x98 (x58 (x110 x3 x39) x146)) (=> (forall ((x79 x1) (x87 x1)) (=> (= x98 (x58 (x110 x3 x87) x79)) (= x98 (x58 (x110 x3 (x58 x104 x87)) (x58 x104 x79))))) (= (x58 (x110 x3 (x58 x104 x39)) x132) x98))))) :named smtcomp424))
(assert (! (forall ((x132 x120) (x104 x60) (x146 x60)) (=> (= (x76 (x65 x119 x132) x104) x98) (= (x151 (x20 x149 (x151 (x94 x114 x132) x146)) x104) (x151 (x20 x149 x146) x104)))) :named smtcomp425))
(assert (! (forall ((x132 x59) (x104 x70) (x146 x126) (x39 x121)) (let ((x83 (x56 (x105 x77 x146) (x56 (x145 x159 x39) x166)))) (=> (= x98 (x122 (x131 x74 x132) x104)) (=> (= x98 (x34 x4 x146)) (=> (= x98 (x34 (x35 x33 x39) x146)) (= (ite (= x166 x83) x39 (x40 (x18 x132 x39) (x101 x104 x83))) (x101 x104 x146))))))) :named smtcomp426))
(assert (! (forall ((x132 x60) (x104 x168)) (=> (= x98 (x76 x112 x132)) (= x98 (x76 x112 (x151 (x140 x163 x104) x132))))) :named smtcomp427))
(assert (! (forall ((x132 x1) (x104 x1) (x146 x24) (x39 x1)) (=> (= x98 (x58 (x110 x3 x132) x104)) (=> (= (= (x58 x146 x132) x98) (= x98 x39)) (=> (forall ((x79 x1) (x87 x1)) (=> (= (x58 (x110 x3 x87) x79) x98) (= x98 (x58 (x110 x3 (x58 x146 x87)) (x58 x146 x79))))) (= x98 (x58 (x110 x3 x39) (x58 x146 x104))))))) :named smtcomp428))
(assert (! (forall ((x132 x1) (x104 x1) (x146 x60) (x39 x162)) (let ((x83 (x5 x118 x146))) (=> (= x98 (x58 (x110 x3 x132) x104)) (=> (= (x76 x83 (x88 x39 x132)) x98) (=> (forall ((x79 x1) (x87 x1)) (=> (= (x58 (x110 x3 x87) x79) x98) (= x98 (x76 (x5 x118 (x88 x39 x87)) (x88 x39 x79))))) (= x98 (x76 x83 (x88 x39 x104)))))))) :named smtcomp429))
(assert (! (forall ((x132 x46) (x104 x120)) (= (x115 (x151 (x94 (x82 x91 x132) x104) x16) x104) x98)) :named smtcomp430))
(assert (! (forall ((x132 x60) (x104 x60)) (=> (= (x76 x112 x132) x98) (=> (= (x76 (x5 x118 x104) x132) x98) (= (x76 x112 x104) x98)))) :named smtcomp431))
(assert (! (forall ((x132 x126) (x104 x126)) (let ((x83 (x56 (x105 x77 x132) x104))) (= (x56 (x105 x77 x83) x104) x83))) :named smtcomp432))
(assert (! (forall ((x132 x121) (x104 x121)) (=> (= x98 (x34 (x35 x33 x132) (x56 (x145 x159 x104) x166))) (=> (=> (= x104 x132) false) false))) :named smtcomp433))
(assert (! (forall ((x132 x124) (x104 x60)) (= (= (x2 (x155 x64 x132) x104) x166) (= x16 x104))) :named smtcomp434))
(assert (! (forall ((x132 x60) (x104 x93) (x146 x126)) (=> (= x98 (x76 x112 x132)) (=> (= x98 (x76 (x5 x118 x132) (x50 (x48 x173 x104) x146))) (exists ((x39 x126)) (and (and (= (x50 (x48 x173 x104) x39) x132) (= (x34 x4 x39) x98)) (= x98 (x34 (x51 x47 x39) x146))))))) :named smtcomp435))
(assert (! (forall ((x132 x60)) (= x98 (x76 (x5 x118 x16) x132))) :named smtcomp436))
(assert (! (forall ((x132 x60) (x104 x60) (x146 x124)) (let ((x83 (x155 x64 x146))) (=> (= (x76 (x5 x118 x132) x104) x98) (= x98 (x34 (x51 x47 (x2 x83 x132)) (x2 x83 x104)))))) :named smtcomp437))
(assert (! (forall ((x132 x126) (x104 x126)) (= (= x132 x104) (and (= (x34 (x51 x47 x104) x132) x98) (= (x34 (x51 x47 x132) x104) x98)))) :named smtcomp438))
(assert (! (forall ((x132 x126)) (= (x34 (x51 x47 x132) x132) x98)) :named smtcomp439))
(assert (! (forall ((x132 x60) (x104 x60) (x146 x126) (x39 x68)) (let ((x83 (x51 x47 x146))) (=> (= x98 (x76 (x5 x118 x132) x104)) (=> (= x98 (x34 x83 (x2 x39 x132))) (=> (forall ((x79 x60) (x87 x60)) (=> (= (x76 (x5 x118 x87) x79) x98) (= (x34 (x51 x47 (x2 x39 x87)) (x2 x39 x79)) x98))) (= (x34 x83 (x2 x39 x104)) x98)))))) :named smtcomp440))
(assert (! (forall ((x132 x120) (x104 x120)) (=> (= (x151 (x94 x114 x104) x16) (x151 (x94 x114 x132) x16)) (= x132 x104))) :named smtcomp441))
(assert (! (forall ((x132 x68) (x104 x60) (x146 x126) (x39 x60)) (=> (= (x34 (x51 x47 (x2 x132 x104)) x146) x98) (=> (= x98 (x76 (x5 x118 x39) x104)) (=> (forall ((x79 x60) (x87 x60)) (=> (= (x76 (x5 x118 x87) x79) x98) (= x98 (x34 (x51 x47 (x2 x132 x87)) (x2 x132 x79))))) (= x98 (x34 (x51 x47 (x2 x132 x39)) x146)))))) :named smtcomp442))
(assert (! (forall ((x132 x46) (x104 x120)) (=> (= x98 (x115 (x151 (x153 x8 x132) x16) x104)) false)) :named smtcomp443))
(assert (! (forall ((x132 x121) (x104 x126)) (= (x56 x6 (x56 (x145 x138 x132) x104)) (x56 (x145 x159 x132) x104))) :named smtcomp444))
(assert (! (forall ((x132 x60)) (=> (forall ((x104 x120)) (=> (= x98 (x76 (x65 x119 x104) x132)) false)) (= x132 x16))) :named smtcomp445))
(assert (! (forall ((x132 x60) (x104 x120)) (=> (= x16 x132) (not (= x98 (x76 (x65 x119 x104) x132))))) :named smtcomp446))
(assert (! (forall ((x132 x59) (x104 x70) (x146 x126) (x39 x121)) (=> (= (x122 (x131 x74 x132) x104) x98) (=> (= (x34 x4 x146) x98) (=> (not (= (x34 (x35 x33 x39) x146) x98)) (=> (not (= x146 x166)) (= (x101 x104 (x56 (x145 x159 x39) x146)) (x40 (x18 x132 x39) (x101 x104 x146)))))))) :named smtcomp447))
(check-sat)
(get-unsat-core)
(exit)
